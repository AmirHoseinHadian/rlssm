{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Parameter recovery of the DDM with starting point bias"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Simulate individual data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from rlssm.random.random_DDM import simulate_ddm\n",
    "\n",
    "data = simulate_ddm(\n",
    "    n_trials=400, \n",
    "    gen_drift=.8, \n",
    "    gen_threshold=1.3, \n",
    "    gen_ndt=.23, \n",
    "    gen_rel_sp=.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "               rt    accuracy\ncount  400.000000  400.000000\nmean     0.601095    0.825000\nstd      0.326752    0.380443\nmin      0.262000    0.000000\n25%      0.371500    1.000000\n50%      0.494000    1.000000\n75%      0.699250    1.000000\nmax      1.818000    1.000000",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rt</th>\n      <th>accuracy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>400.000000</td>\n      <td>400.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.601095</td>\n      <td>0.825000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.326752</td>\n      <td>0.380443</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.262000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.371500</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.494000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.699250</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.818000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()[['rt', 'accuracy']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Initialize the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from rlssm.model.models_DDM import DDModel\n",
    "\n",
    "model = DDModel(hierarchical_levels = 1, starting_point_bias=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "# sampling parameters\n",
    "n_warmup = 1500\n",
    "n_sampling = 1500\n",
    "n_chains = 2\n",
    "n_thin = 1\n",
    "\n",
    "# bayesian model, change default priors:\n",
    "drift_priors = {'mu':1, 'sd':3}\n",
    "threshold_priors = {'mu':-1, 'sd':3}\n",
    "ndt_priors = {'mu':-1, 'sd':1}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting the model using the priors:\n",
      "drift_priors {'mu': 1, 'sd': 3}\n",
      "threshold_priors {'mu': -1, 'sd': 3}\n",
      "ndt_priors {'mu': -1, 'sd': 1}\n",
      "rel_sp_priors {'mu': 0, 'sd': 0.8}\n"
     ]
    },
    {
     "data": {
      "text/plain": "chain 1 |          | 00:00 Status",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "7fd668618f204973a110908137e6fa0a"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "chain 2 |          | 00:00 Status",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "d7cea2e40a8545c5b8cd0f30f6776060"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                                                                \n",
      "Checks MCMC diagnostics:\n",
      "n_eff / iter looks reasonable for all parameters\n",
      "0 of 3000 iterations saturated the maximum tree depth of 10 (0.0%)\n",
      "E-BFMI indicated no pathological behavior\n",
      "0.0 of 3000 iterations ended with a divergence (0.0%)\n"
     ]
    }
   ],
   "source": [
    "model_fit = model.fit(\n",
    "    data,\n",
    "    drift_priors=drift_priors,\n",
    "    threshold_priors=threshold_priors,\n",
    "    ndt_priors=ndt_priors,\n",
    "    thin = n_thin,\n",
    "    iter_warmup=n_warmup,\n",
    "    iter_sampling=n_sampling,\n",
    "    chains = n_chains)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### get Rhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "                  rhat      variable\nname                                \nlp__          0.999818          lp__\ndrift         1.002920         drift\nthreshold     1.001350     threshold\nndt           1.003280           ndt\nrel_sp        1.002370        rel_sp\n...                ...           ...\nlog_lik[396]  1.003840  log_lik[396]\nlog_lik[397]  1.004130  log_lik[397]\nlog_lik[398]  1.001970  log_lik[398]\nlog_lik[399]  1.001470  log_lik[399]\nlog_lik[400]  1.000530  log_lik[400]\n\n[2809 rows x 2 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>rhat</th>\n      <th>variable</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>lp__</th>\n      <td>0.999818</td>\n      <td>lp__</td>\n    </tr>\n    <tr>\n      <th>drift</th>\n      <td>1.002920</td>\n      <td>drift</td>\n    </tr>\n    <tr>\n      <th>threshold</th>\n      <td>1.001350</td>\n      <td>threshold</td>\n    </tr>\n    <tr>\n      <th>ndt</th>\n      <td>1.003280</td>\n      <td>ndt</td>\n    </tr>\n    <tr>\n      <th>rel_sp</th>\n      <td>1.002370</td>\n      <td>rel_sp</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>log_lik[396]</th>\n      <td>1.003840</td>\n      <td>log_lik[396]</td>\n    </tr>\n    <tr>\n      <th>log_lik[397]</th>\n      <td>1.004130</td>\n      <td>log_lik[397]</td>\n    </tr>\n    <tr>\n      <th>log_lik[398]</th>\n      <td>1.001970</td>\n      <td>log_lik[398]</td>\n    </tr>\n    <tr>\n      <th>log_lik[399]</th>\n      <td>1.001470</td>\n      <td>log_lik[399]</td>\n    </tr>\n    <tr>\n      <th>log_lik[400]</th>\n      <td>1.000530</td>\n      <td>log_lik[400]</td>\n    </tr>\n  </tbody>\n</table>\n<p>2809 rows Ã— 2 columns</p>\n</div>"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.rhat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### calculate wAIC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{'lppd': -143.48130078806022,\n 'p_waic': 3.8030450001386353,\n 'waic': 294.5686915763977,\n 'waic_se': 48.492086527586515}"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.waic"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Posteriors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "        transf_ndt  transf_threshold  transf_rel_sp  transf_drift\ncount  3000.000000       3000.000000    3000.000000   3000.000000\nmean      0.227154          1.347566       0.585419      0.863216\nstd       0.005593          0.035651       0.019158      0.105316\nmin       0.204707          1.247490       0.507420      0.484337\n25%       0.223648          1.323135       0.572606      0.789014\n50%       0.227517          1.345905       0.585508      0.863565\n75%       0.231100          1.372325       0.598611      0.935705\nmax       0.242389          1.487720       0.644303      1.193490",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>transf_ndt</th>\n      <th>transf_threshold</th>\n      <th>transf_rel_sp</th>\n      <th>transf_drift</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3000.000000</td>\n      <td>3000.000000</td>\n      <td>3000.000000</td>\n      <td>3000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.227154</td>\n      <td>1.347566</td>\n      <td>0.585419</td>\n      <td>0.863216</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.005593</td>\n      <td>0.035651</td>\n      <td>0.019158</td>\n      <td>0.105316</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.204707</td>\n      <td>1.247490</td>\n      <td>0.507420</td>\n      <td>0.484337</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>0.223648</td>\n      <td>1.323135</td>\n      <td>0.572606</td>\n      <td>0.789014</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.227517</td>\n      <td>1.345905</td>\n      <td>0.585508</td>\n      <td>0.863565</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.231100</td>\n      <td>1.372325</td>\n      <td>0.598611</td>\n      <td>0.935705</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>0.242389</td>\n      <td>1.487720</td>\n      <td>0.644303</td>\n      <td>1.193490</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.samples.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "sns.set(context = \"talk\", \n",
    "        style = \"white\", \n",
    "        palette = \"husl\",\n",
    "        rc={'figure.figsize':(15, 8)})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Here we plot the estimated posterior distributions against the generating parameters, to see whether the model parameters are recovering well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 1440x360 with 4 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = model_fit.plot_posteriors(height=5, show_intervals='HDI')\n",
    "\n",
    "for i, ax in enumerate(g.axes.flatten()):\n",
    "    ax.axvline(data[['drift', 'threshold', 'ndt', 'rel_sp']].mean().values[i], color='grey', linestyle='--')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}