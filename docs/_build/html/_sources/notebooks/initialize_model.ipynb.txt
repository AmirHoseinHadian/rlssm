{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "considered-modification",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# How to initialize a model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "attempted-favorite",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "To initialize a model, you can use one of the following model classes:\n",
    "\n",
    "1. For simple reinforcement learning models: `RLModel_2A`\n",
    "\n",
    "2. For diffusion decision models: `DDModel`\n",
    "\n",
    "3. For reinforcement learning diffusion decision models: `RLDDModel`\n",
    "\n",
    "4. For race models: `RDModel_2A`, `LBAModel_2A`, `ARDModel_2A`, `ALBAModel_2A`\n",
    "\n",
    "5. For reinforcement learning race models: `RLRDModel_2A`, `RLLBAModel_2A`, `RLARDModel_2A`, `RLALBAModel_2A`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bacterial-justice",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "All these classes have 1 non-default argument: `hierarchical_levels`. This should be set to 1 for model fits on individual data, and 2 for model fits on group data.\n",
    "\n",
    "Additional arguments can be specified in order to \"turn on and off\" different model mechanisms that are implemented.\n",
    "\n",
    "For example, let's say I want to specify a **RLDDM for 1 subject**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "sporting-journal",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from rlssm.model.models_DDM import RLDDModel\n",
    "\n",
    "model = RLDDModel(hierarchical_levels=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "marine-location",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "After initialization, you can inspect the model's default priors. You can change these when you fit the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "rocky-opera",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{'alpha_priors': {'mu': 0, 'sd': 1},\n 'drift_scaling_priors': {'mu': 1, 'sd': 50},\n 'threshold_priors': {'mu': 1, 'sd': 5},\n 'ndt_priors': {'mu': 1, 'sd': 1}}"
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.priors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "previous-adjustment",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Note that, if this is the first time that you initialize this type of model, it's going to take some time to compile it. Otherwise, the cashed model will be automatically loaded.\n",
    "\n",
    "By default, all mechanisms are \"off\", meaning that the simplest model is fit, so you need to set alternative mechanisms to `True` to have them included in your model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "quick-thinking",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "from rlssm.model.models_DDM import DDModel\n",
    "\n",
    "model_complex = DDModel(hierarchical_levels=1,\n",
    "                        drift_variability = True,\n",
    "                        starting_point_variability=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "blind-objective",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "{'threshold_priors': {'mu': 0, 'sd': 5},\n 'ndt_priors': {'mu': 0, 'sd': 5},\n 'drift_trial_mu_priors': {'mu': 1, 'sd': 5},\n 'drift_trial_sd_priors': {'mu': 0, 'sd': 5},\n 'rel_sp_trial_mu_priors': {'mu': 0, 'sd': 0.8},\n 'rel_sp_trial_sd_priors': {'mu': 0, 'sd': 0.5}}"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_complex.priors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "swiss-windows",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "You can check what are the possible mechanisms for each class in the [API reference](https://rlssm.readthedocs.io/en/latest/models/model_classes.html) guide, or by typing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "metropolitan-married",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "DDModel?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}