
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace DDM_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 13, column 1 to column 12)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 14, column 1 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 15, column 1 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 18, column 1 to column 18)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 19, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 20, column 1 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 21, column 1 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 23, column 1 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 24, column 1 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 25, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 27, column 1 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 28, column 1 to column 44)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 29, column 1 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 32, column 2 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 33, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 34, column 2 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 35, column 2 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 31, column 16 to line 36, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 31, column 1 to line 36, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 46, column 1 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 49, column 2 to column 90)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 48, column 17 to line 50, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 48, column 2 to line 50, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 48, column 1 to line 51, column 1)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 39, column 1 to column 50)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 40, column 1 to column 62)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 41, column 1 to column 44)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 43, column 1 to column 59)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 2, column 1 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 4, column 32 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 4, column 1 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 5, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 5, column 1 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 7, column 1 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 8, column 1 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 9, column 1 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 10, column 1 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 18, column 15 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 19, column 14 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 20, column 27 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 21, column 21 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/DDM.stan', line 46, column 8 to column 9)"};




class DDM_model final : public model_base_crtp<DDM_model> {

 private:
  int N;
  std::vector<int> accuracy;
  std::vector<double> rt;
  Eigen::Matrix<double, -1, 1> drift_priors__;
  Eigen::Matrix<double, -1, 1> threshold_priors__;
  Eigen::Matrix<double, -1, 1> ndt_priors__;
  double starting_point; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> drift_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> threshold_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ndt_priors{nullptr, 0};
 
 public:
  ~DDM_model() { }
  
  inline std::string model_name() const final { return "DDM_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  DDM_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "DDM_model_namespace::DDM_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 29;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("accuracy", "N", N);
      current_statement__ = 31;
      context__.validate_dims("data initialization","accuracy","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      accuracy = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 31;
      accuracy = context__.vals_i("accuracy");
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "accuracy", accuracy, -1);
      current_statement__ = 31;
      stan::math::check_less_or_equal(function__, "accuracy", accuracy, 1);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization","rt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 33;
      rt = context__.vals_r("rt");
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization","drift_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      drift_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&drift_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(drift_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> drift_priors_flat__;
        current_statement__ = 34;
        drift_priors_flat__ = context__.vals_r("drift_priors");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(drift_priors, drift_priors_flat__[(pos__ - 1)],
            "assigning variable drift_priors", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      context__.validate_dims("data initialization","threshold_priors",
          "double", std::vector<size_t>{static_cast<size_t>(2)});
      threshold_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&threshold_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(threshold_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> threshold_priors_flat__;
        current_statement__ = 35;
        threshold_priors_flat__ = context__.vals_r("threshold_priors");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 35;
          stan::model::assign(threshold_priors,
            threshold_priors_flat__[(pos__ - 1)],
            "assigning variable threshold_priors", stan::model::index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      context__.validate_dims("data initialization","ndt_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      ndt_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ndt_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 36;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 36;
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          current_statement__ = 36;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      context__.validate_dims("data initialization","starting_point",
          "double", std::vector<size_t>{});
      starting_point = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 37;
      starting_point = context__.vals_r("starting_point")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "starting_point",
                                            starting_point, 0);
      current_statement__ = 37;
      stan::math::check_less_or_equal(function__, "starting_point",
                                         starting_point, 1);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("drift_ll", "N", N);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("drift_t", "N", N);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("threshold_t", "N", N);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "DDM_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ drift = DUMMY_VAR__;
      current_statement__ = 1;
      drift = in__.template read<local_scalar_t__>();
      local_scalar_t__ threshold = DUMMY_VAR__;
      current_statement__ = 2;
      threshold = in__.template read<local_scalar_t__>();
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 3;
      ndt = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> drift_ll =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> drift_t =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> threshold_t =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> ndt_t =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      local_scalar_t__ transf_drift = DUMMY_VAR__;
      local_scalar_t__ transf_threshold = DUMMY_VAR__;
      local_scalar_t__ transf_ndt = DUMMY_VAR__;
      current_statement__ = 11;
      transf_drift = drift;
      current_statement__ = 12;
      transf_threshold = stan::math::log((1 + stan::math::exp(threshold)));
      current_statement__ = 13;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 19;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 14;
        stan::model::assign(drift_t, transf_drift,
          "assigning variable drift_t", stan::model::index_uni(n));
        current_statement__ = 15;
        stan::model::assign(drift_ll,
          (stan::model::rvalue(drift_t, "drift_t", stan::model::index_uni(n))
            *
            stan::model::rvalue(accuracy, "accuracy",
              stan::model::index_uni(n))),
          "assigning variable drift_ll", stan::model::index_uni(n));
        current_statement__ = 16;
        stan::model::assign(threshold_t, transf_threshold,
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 17;
        stan::model::assign(ndt_t, transf_ndt,
          "assigning variable ndt_t", stan::model::index_uni(n));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      {
        current_statement__ = 25;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(drift,
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(2))));
        current_statement__ = 26;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(threshold,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(2))));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(2))));
        current_statement__ = 28;
        lp_accum__.add(
          stan::math::wiener_lpdf<propto__>(rt, threshold_t, ndt_t,
            starting_point, drift_ll));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "DDM_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double drift = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      drift = in__.template read<local_scalar_t__>();
      double threshold = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      threshold = in__.template read<local_scalar_t__>();
      double ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      ndt = in__.template read<local_scalar_t__>();
      std::vector<double> drift_ll =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> drift_t =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> threshold_t =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ndt_t =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      double transf_drift = std::numeric_limits<double>::quiet_NaN();
      double transf_threshold = std::numeric_limits<double>::quiet_NaN();
      double transf_ndt = std::numeric_limits<double>::quiet_NaN();
      out__.write(drift);
      out__.write(threshold);
      out__.write(ndt);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      transf_drift = drift;
      current_statement__ = 12;
      transf_threshold = stan::math::log((1 + stan::math::exp(threshold)));
      current_statement__ = 13;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 19;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 14;
        stan::model::assign(drift_t, transf_drift,
          "assigning variable drift_t", stan::model::index_uni(n));
        current_statement__ = 15;
        stan::model::assign(drift_ll,
          (stan::model::rvalue(drift_t, "drift_t", stan::model::index_uni(n))
            *
            stan::model::rvalue(accuracy, "accuracy",
              stan::model::index_uni(n))),
          "assigning variable drift_ll", stan::model::index_uni(n));
        current_statement__ = 16;
        stan::model::assign(threshold_t, transf_threshold,
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 17;
        stan::model::assign(ndt_t, transf_ndt,
          "assigning variable ndt_t", stan::model::index_uni(n));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      if (emit_transformed_parameters__) {
        out__.write(drift_ll);
        out__.write(drift_t);
        out__.write(threshold_t);
        out__.write(ndt_t);
        out__.write(transf_drift);
        out__.write(transf_threshold);
        out__.write(transf_ndt);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 23;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 21;
          stan::model::assign(log_lik,
            stan::math::wiener_lpdf<false>(
              stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
              stan::model::rvalue(threshold_t, "threshold_t",
                stan::model::index_uni(n)),
              stan::model::rvalue(ndt_t, "ndt_t", stan::model::index_uni(n)),
              starting_point,
              stan::model::rvalue(drift_ll, "drift_ll",
                stan::model::index_uni(n))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ drift = DUMMY_VAR__;
      drift = in__.read<local_scalar_t__>();
      out__.write(drift);
      local_scalar_t__ threshold = DUMMY_VAR__;
      threshold = in__.read<local_scalar_t__>();
      out__.write(threshold);
      local_scalar_t__ ndt = DUMMY_VAR__;
      ndt = in__.read<local_scalar_t__>();
      out__.write(ndt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"drift", "threshold", "ndt",
      "drift_ll", "drift_t", "threshold_t", "ndt_t", "transf_drift",
      "transf_threshold", "transf_ndt", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "drift");
    param_names__.emplace_back(std::string() + "threshold");
    param_names__.emplace_back(std::string() + "ndt");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_ll" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_drift");
      param_names__.emplace_back(std::string() + "transf_threshold");
      param_names__.emplace_back(std::string() + "transf_ndt");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "drift");
    param_names__.emplace_back(std::string() + "threshold");
    param_names__.emplace_back(std::string() + "ndt");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_ll" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_drift");
      param_names__.emplace_back(std::string() + "transf_threshold");
      param_names__.emplace_back(std::string() + "transf_ndt");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"drift\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_ll\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_drift\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"drift\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_ll\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_drift\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = ((((((N + N) + N) + N)
                                                          + 1) + 1) + 1);
      const size_t num_gen_quantities = N;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = ((((((N + N) + N) + N)
                                                          + 1) + 1) + 1);
      const size_t num_gen_quantities = N;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"drift", "threshold",
      "ndt"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = DDM_model_namespace::DDM_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return DDM_model_namespace::profiles__;
}

#endif


