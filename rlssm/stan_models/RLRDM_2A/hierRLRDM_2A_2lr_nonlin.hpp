
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace hierRLRDM_2A_2lr_nonlin_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 243> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 92, column 2 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 93, column 2 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 94, column 2 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 95, column 2 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 96, column 2 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 97, column 2 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 98, column 2 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 100, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 101, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 102, column 2 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 103, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 104, column 2 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 105, column 2 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 106, column 2 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 108, column 2 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 109, column 2 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 110, column 2 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 111, column 2 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 112, column 2 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 113, column 2 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 114, column 2 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 118, column 2 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 119, column 2 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 120, column 2 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 121, column 2 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 124, column 2 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 126, column 2 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 127, column 2 to column 13)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 128, column 2 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 129, column 2 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 130, column 2 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 131, column 2 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 132, column 2 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 134, column 2 to column 42)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 135, column 2 to column 42)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 136, column 2 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 137, column 2 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 138, column 2 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 139, column 2 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 140, column 2 to column 37)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 142, column 2 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 143, column 2 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 144, column 2 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 145, column 2 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 146, column 2 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 147, column 2 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 148, column 2 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 150, column 2 to column 42)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 151, column 2 to column 42)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 152, column 2 to column 59)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 153, column 2 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 154, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 155, column 2 to column 41)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 156, column 2 to column 53)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 159, column 4 to column 71)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 160, column 4 to column 71)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 161, column 4 to column 96)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 162, column 4 to column 80)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 163, column 4 to column 56)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 164, column 4 to column 62)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 165, column 4 to column 84)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 158, column 17 to line 166, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 158, column 2 to line 166, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 173, column 8 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 174, column 8 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 172, column 13 to line 175, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 171, column 8 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 170, column 31 to line 172, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 170, column 6 to line 175, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 169, column 29 to line 176, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 169, column 4 to line 176, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 177, column 4 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 178, column 4 to column 61)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 185, column 6 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 186, column 6 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 184, column 8 to line 187, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 181, column 6 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 182, column 6 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 180, column 43 to line 183, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 180, column 4 to line 187, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 189, column 4 to column 41)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 190, column 4 to column 41)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 197, column 6 to column 134)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 198, column 6 to column 134)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 196, column 8 to line 199, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 193, column 6 to column 193)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 194, column 6 to column 193)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 192, column 27 to line 195, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 192, column 4 to line 199, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 201, column 4 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 202, column 4 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 224, column 8 to column 83)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 223, column 13 to line 225, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 222, column 8 to column 83)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 221, column 23 to line 223, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 221, column 6 to line 225, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 229, column 8 to column 83)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 228, column 13 to line 230, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 227, column 8 to column 83)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 226, column 23 to line 228, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 226, column 6 to line 230, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 220, column 8 to line 231, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 216, column 10 to column 85)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 215, column 15 to line 217, column 9)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 214, column 10 to column 85)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 213, column 25 to line 215, column 9)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 213, column 8 to line 217, column 9)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 212, column 10 to line 218, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 209, column 10 to column 85)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 208, column 15 to line 210, column 9)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 207, column 10 to column 85)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 206, column 25 to line 208, column 9)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 206, column 8 to line 210, column 9)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 205, column 26 to line 211, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 205, column 6 to line 218, column 7)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 204, column 30 to line 219, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 204, column 4 to line 231, column 5)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 168, column 17 to line 232, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 168, column 2 to line 232, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 264, column 2 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 267, column 4 to column 156)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 266, column 16 to line 268, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 266, column 2 to line 268, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 265, column 2 to line 269, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 236, column 2 to column 66)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 237, column 2 to column 66)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 238, column 2 to column 48)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 239, column 2 to column 66)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 240, column 2 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 241, column 2 to column 69)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 242, column 2 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 244, column 2 to column 66)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 245, column 2 to column 66)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 246, column 2 to column 48)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 247, column 2 to column 66)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 248, column 2 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 249, column 2 to column 69)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 250, column 2 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 252, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 253, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 254, column 2 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 255, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 256, column 2 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 257, column 2 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 258, column 2 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 260, column 2 to column 58)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 49, column 2 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 50, column 2 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 51, column 2 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 52, column 36 to column 37)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 52, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 54, column 2 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 56, column 27 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 56, column 2 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 57, column 27 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 57, column 2 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 59, column 9 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 59, column 2 to column 18)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 60, column 9 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 60, column 2 to column 18)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 63, column 35 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 63, column 2 to column 38)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 64, column 35 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 64, column 2 to column 38)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 65, column 33 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 65, column 2 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 66, column 38 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 66, column 2 to column 41)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 68, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 68, column 2 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 70, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 71, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 72, column 2 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 73, column 2 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 74, column 2 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 75, column 2 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 76, column 2 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 80, column 9 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 80, column 2 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 81, column 10 to column 11)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 81, column 2 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 83, column 2 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 86, column 4 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 87, column 4 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 85, column 16 to line 88, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 85, column 2 to line 88, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 108, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 109, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 110, column 13 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 111, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 112, column 14 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 113, column 20 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 114, column 23 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 118, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 119, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 120, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 121, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 124, column 9 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 132, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 134, column 39 to column 40)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 135, column 39 to column 40)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 136, column 24 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 137, column 30 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 138, column 25 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 139, column 31 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 140, column 34 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 264, column 9 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 3, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 4, column 10 to column 75)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 5, column 10 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 2, column 42 to line 6, column 6)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 9, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 10, column 10 to column 74)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 11, column 10 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 8, column 42 to line 12, column 6)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 16, column 10 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 17, column 17 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 17, column 10 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 18, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 19, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 20, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 23, column 15 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 40, column 20 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 39, column 19 to line 41, column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 30, column 20 to column 58)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 31, column 20 to column 62)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 29, column 22 to line 32, column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 26, column 20 to column 58)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 27, column 20 to column 62)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 25, column 34 to line 28, column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 25, column 18 to line 32, column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 33, column 18 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 36, column 20 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 35, column 35 to line 37, column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 35, column 16 to line 37, column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 24, column 24 to line 38, column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 24, column 15 to line 41, column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 22, column 31 to line 42, column 11)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 22, column 10 to line 42, column 11)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 43, column 10 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 44, column 10 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/RLRDM_2A/hierRLRDM_2A_2lr_nonlin.stan', line 14, column 89 to line 45, column 6)"};

struct race_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__, typename T4__,
            stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>>
  operator()(const T0__& RT, const T1__& ndt, const T2__& b,
             const T3__& drift_cor, const T4__& drift_inc,
             std::ostream* pstream__) const;
};
struct race_pdf_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& b, const T2__& v,
             std::ostream* pstream__) const;
};
struct race_cdf_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& b, const T2__& v,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  race_pdf(const T0__& t, const T1__& b, const T2__& v,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ pdf = DUMMY_VAR__;
      current_statement__ = 209;
      pdf = ((b /
               stan::math::sqrt(
                 ((2 * stan::math::pi()) * stan::math::pow(t, 3)))) *
              stan::math::exp((-stan::math::pow(((v * t) - b), 2) / (2 * t))));
      current_statement__ = 210;
      return pdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  race_cdf(const T0__& t, const T1__& b, const T2__& v,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ cdf = DUMMY_VAR__;
      current_statement__ = 213;
      cdf = (stan::math::Phi((((v * t) - b) / stan::math::sqrt(t))) +
              (stan::math::exp(((2 * v) * b)) *
                stan::math::Phi((-((v * t) + b) / stan::math::sqrt(t)))));
      current_statement__ = 214;
      return cdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>>
  race_lpdf(const T0__& RT_arg__, const T1__& ndt_arg__, const T2__& b_arg__,
            const T3__& drift_cor_arg__, const T4__& drift_inc_arg__,
            std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>>;
    int current_statement__ = 0; 
    const auto& RT = stan::math::to_ref(RT_arg__);
    const auto& ndt = stan::math::to_ref(ndt_arg__);
    const auto& b = stan::math::to_ref(b_arg__);
    const auto& drift_cor = stan::math::to_ref(drift_cor_arg__);
    const auto& drift_inc = stan::math::to_ref(drift_inc_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 217;
      stan::math::validate_non_negative_index("prob", "rows(RT)",
                                              stan::math::rows(RT));
      Eigen::Matrix<local_scalar_t__, -1, 1> prob =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::rows(RT), DUMMY_VAR__);
      local_scalar_t__ cdf = DUMMY_VAR__;
      local_scalar_t__ pdf = DUMMY_VAR__;
      local_scalar_t__ out = DUMMY_VAR__;
      current_statement__ = 239;
      for (int i = 1; i <= stan::math::rows(RT); ++i) {
        current_statement__ = 222;
        t = (stan::model::rvalue(RT, "RT",
               stan::model::index_uni(i), stan::model::index_uni(1)) -
              stan::model::rvalue(ndt, "ndt", stan::model::index_uni(i)));
        current_statement__ = 237;
        if (stan::math::logical_gt(t, 0)) {
          current_statement__ = 231;
          if (stan::math::logical_eq(
                stan::model::rvalue(RT, "RT",
                  stan::model::index_uni(i), stan::model::index_uni(2)), 1)) {
            current_statement__ = 228;
            pdf = race_pdf(t,
                    stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                    stan::model::rvalue(drift_cor, "drift_cor",
                      stan::model::index_uni(i)), pstream__);
            current_statement__ = 229;
            cdf = (1 -
                    race_cdf(t,
                      stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                      stan::model::rvalue(drift_inc, "drift_inc",
                        stan::model::index_uni(i)), pstream__));
          } else {
            current_statement__ = 225;
            pdf = race_pdf(t,
                    stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                    stan::model::rvalue(drift_inc, "drift_inc",
                      stan::model::index_uni(i)), pstream__);
            current_statement__ = 226;
            cdf = (1 -
                    race_cdf(t,
                      stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                      stan::model::rvalue(drift_cor, "drift_cor",
                        stan::model::index_uni(i)), pstream__));
          }
          current_statement__ = 232;
          stan::model::assign(prob, (pdf * cdf),
            "assigning variable prob", stan::model::index_uni(i));
          current_statement__ = 235;
          if (stan::math::logical_lt(
                stan::model::rvalue(prob, "prob", stan::model::index_uni(i)),
                1e-10)) {
            current_statement__ = 233;
            stan::model::assign(prob, 1e-10,
              "assigning variable prob", stan::model::index_uni(i));
          } 
        } else {
          current_statement__ = 223;
          stan::model::assign(prob, 1e-10,
            "assigning variable prob", stan::model::index_uni(i));
        }
      }
      current_statement__ = 240;
      out = stan::math::sum(stan::math::log(prob));
      current_statement__ = 241;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_eigen_matrix_dynamic_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>>
race_lpdf_functor__::operator()(const T0__& RT, const T1__& ndt,
                                const T2__& b, const T3__& drift_cor,
                                const T4__& drift_inc,
                                std::ostream* pstream__)  const
{
  return race_lpdf<propto__>(RT, ndt, b, drift_cor, drift_inc, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& v,
                               std::ostream* pstream__)  const
{
  return race_pdf(t, b, v, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& v,
                               std::ostream* pstream__)  const
{
  return race_cdf(t, b, v, pstream__);
}


class hierRLRDM_2A_2lr_nonlin_model final : public model_base_crtp<hierRLRDM_2A_2lr_nonlin_model> {

 private:
  int N;
  int L;
  int K;
  std::vector<int> participant;
  double initial_value;
  std::vector<int> block_label;
  std::vector<int> trial_block;
  Eigen::Matrix<double, -1, 1> f_cor__;
  Eigen::Matrix<double, -1, 1> f_inc__;
  std::vector<int> cor_option;
  std::vector<int> inc_option;
  std::vector<int> accuracy;
  std::vector<int> feedback_type;
  std::vector<double> rt;
  Eigen::Matrix<double, -1, 1> alpha_pos_priors__;
  Eigen::Matrix<double, -1, 1> alpha_neg_priors__;
  Eigen::Matrix<double, -1, 1> slop_priors__;
  Eigen::Matrix<double, -1, 1> drift_scaling_priors__;
  Eigen::Matrix<double, -1, 1> threshold_priors__;
  Eigen::Matrix<double, -1, 1> ndt_priors__;
  Eigen::Matrix<double, -1, 1> drift_asym_priors__;
  Eigen::Matrix<double, -1, 1> Q0__;
  Eigen::Matrix<double, -1, -1> RT__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> f_cor{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> f_inc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> alpha_pos_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> alpha_neg_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> slop_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> drift_scaling_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> threshold_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ndt_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> drift_asym_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Q0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> RT{nullptr, 0, 0};
 
 public:
  ~hierRLRDM_2A_2lr_nonlin_model() { }
  
  inline std::string model_name() const final { return "hierRLRDM_2A_2lr_nonlin_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  hierRLRDM_2A_2lr_nonlin_model(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "hierRLRDM_2A_2lr_nonlin_model_namespace::hierRLRDM_2A_2lr_nonlin_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 147;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 147;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 148;
      context__.validate_dims("data initialization","L","int",
           std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      
      
      current_statement__ = 148;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 149;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 149;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("participant", "N", N);
      current_statement__ = 151;
      context__.validate_dims("data initialization","participant","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      participant = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 151;
      participant = context__.vals_i("participant");
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "participant",
                                            participant, 1);
      current_statement__ = 151;
      stan::math::check_less_or_equal(function__, "participant", participant,
                                         L);
      current_statement__ = 152;
      context__.validate_dims("data initialization","initial_value","double",
           std::vector<size_t>{});
      initial_value = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 152;
      initial_value = context__.vals_r("initial_value")[(1 - 1)];
      current_statement__ = 153;
      stan::math::validate_non_negative_index("block_label", "N", N);
      current_statement__ = 154;
      context__.validate_dims("data initialization","block_label","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      block_label = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 154;
      block_label = context__.vals_i("block_label");
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "block_label",
                                            block_label, 1);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("trial_block", "N", N);
      current_statement__ = 156;
      context__.validate_dims("data initialization","trial_block","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      trial_block = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 156;
      trial_block = context__.vals_i("trial_block");
      current_statement__ = 156;
      stan::math::check_greater_or_equal(function__, "trial_block",
                                            trial_block, 1);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("f_cor", "N", N);
      current_statement__ = 158;
      context__.validate_dims("data initialization","f_cor","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      f_cor__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&f_cor) Eigen::Map<Eigen::Matrix<double, -1, 1>>(f_cor__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> f_cor_flat__;
        current_statement__ = 158;
        f_cor_flat__ = context__.vals_r("f_cor");
        current_statement__ = 158;
        pos__ = 1;
        current_statement__ = 158;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 158;
          stan::model::assign(f_cor, f_cor_flat__[(pos__ - 1)],
            "assigning variable f_cor", stan::model::index_uni(sym1__));
          current_statement__ = 158;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 159;
      stan::math::validate_non_negative_index("f_inc", "N", N);
      current_statement__ = 160;
      context__.validate_dims("data initialization","f_inc","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      f_inc__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&f_inc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(f_inc__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> f_inc_flat__;
        current_statement__ = 160;
        f_inc_flat__ = context__.vals_r("f_inc");
        current_statement__ = 160;
        pos__ = 1;
        current_statement__ = 160;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 160;
          stan::model::assign(f_inc, f_inc_flat__[(pos__ - 1)],
            "assigning variable f_inc", stan::model::index_uni(sym1__));
          current_statement__ = 160;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 161;
      stan::math::validate_non_negative_index("cor_option", "N", N);
      current_statement__ = 162;
      context__.validate_dims("data initialization","cor_option","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      cor_option = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 162;
      cor_option = context__.vals_i("cor_option");
      current_statement__ = 162;
      stan::math::check_greater_or_equal(function__, "cor_option",
                                            cor_option, 1);
      current_statement__ = 162;
      stan::math::check_less_or_equal(function__, "cor_option", cor_option, K);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("inc_option", "N", N);
      current_statement__ = 164;
      context__.validate_dims("data initialization","inc_option","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      inc_option = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 164;
      inc_option = context__.vals_i("inc_option");
      current_statement__ = 164;
      stan::math::check_greater_or_equal(function__, "inc_option",
                                            inc_option, 1);
      current_statement__ = 164;
      stan::math::check_less_or_equal(function__, "inc_option", inc_option, K);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("accuracy", "N", N);
      current_statement__ = 166;
      context__.validate_dims("data initialization","accuracy","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      accuracy = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 166;
      accuracy = context__.vals_i("accuracy");
      current_statement__ = 166;
      stan::math::check_greater_or_equal(function__, "accuracy", accuracy, 1);
      current_statement__ = 166;
      stan::math::check_less_or_equal(function__, "accuracy", accuracy, 2);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("feedback_type", "N", N);
      current_statement__ = 168;
      context__.validate_dims("data initialization","feedback_type","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      feedback_type = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 168;
      feedback_type = context__.vals_i("feedback_type");
      current_statement__ = 168;
      stan::math::check_greater_or_equal(function__, "feedback_type",
                                            feedback_type, 0);
      current_statement__ = 168;
      stan::math::check_less_or_equal(function__, "feedback_type",
                                         feedback_type, 1);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 170;
      context__.validate_dims("data initialization","rt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 170;
      rt = context__.vals_r("rt");
      current_statement__ = 170;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 171;
      context__.validate_dims("data initialization","alpha_pos_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      alpha_pos_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&alpha_pos_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(alpha_pos_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> alpha_pos_priors_flat__;
        current_statement__ = 171;
        alpha_pos_priors_flat__ = context__.vals_r("alpha_pos_priors");
        current_statement__ = 171;
        pos__ = 1;
        current_statement__ = 171;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 171;
          stan::model::assign(alpha_pos_priors,
            alpha_pos_priors_flat__[(pos__ - 1)],
            "assigning variable alpha_pos_priors", stan::model::index_uni(sym1__));
          current_statement__ = 171;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 172;
      context__.validate_dims("data initialization","alpha_neg_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      alpha_neg_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&alpha_neg_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(alpha_neg_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> alpha_neg_priors_flat__;
        current_statement__ = 172;
        alpha_neg_priors_flat__ = context__.vals_r("alpha_neg_priors");
        current_statement__ = 172;
        pos__ = 1;
        current_statement__ = 172;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 172;
          stan::model::assign(alpha_neg_priors,
            alpha_neg_priors_flat__[(pos__ - 1)],
            "assigning variable alpha_neg_priors", stan::model::index_uni(sym1__));
          current_statement__ = 172;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 173;
      context__.validate_dims("data initialization","slop_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      slop_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&slop_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(slop_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> slop_priors_flat__;
        current_statement__ = 173;
        slop_priors_flat__ = context__.vals_r("slop_priors");
        current_statement__ = 173;
        pos__ = 1;
        current_statement__ = 173;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 173;
          stan::model::assign(slop_priors, slop_priors_flat__[(pos__ - 1)],
            "assigning variable slop_priors", stan::model::index_uni(sym1__));
          current_statement__ = 173;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 174;
      context__.validate_dims("data initialization","drift_scaling_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      drift_scaling_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&drift_scaling_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(drift_scaling_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> drift_scaling_priors_flat__;
        current_statement__ = 174;
        drift_scaling_priors_flat__ = context__.vals_r("drift_scaling_priors");
        current_statement__ = 174;
        pos__ = 1;
        current_statement__ = 174;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 174;
          stan::model::assign(drift_scaling_priors,
            drift_scaling_priors_flat__[(pos__ - 1)],
            "assigning variable drift_scaling_priors", stan::model::index_uni(sym1__));
          current_statement__ = 174;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 175;
      context__.validate_dims("data initialization","threshold_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      threshold_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&threshold_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(threshold_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> threshold_priors_flat__;
        current_statement__ = 175;
        threshold_priors_flat__ = context__.vals_r("threshold_priors");
        current_statement__ = 175;
        pos__ = 1;
        current_statement__ = 175;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 175;
          stan::model::assign(threshold_priors,
            threshold_priors_flat__[(pos__ - 1)],
            "assigning variable threshold_priors", stan::model::index_uni(sym1__));
          current_statement__ = 175;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 176;
      context__.validate_dims("data initialization","ndt_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      ndt_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ndt_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 176;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        current_statement__ = 176;
        pos__ = 1;
        current_statement__ = 176;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 176;
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          current_statement__ = 176;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 177;
      context__.validate_dims("data initialization","drift_asym_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      drift_asym_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&drift_asym_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(drift_asym_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> drift_asym_priors_flat__;
        current_statement__ = 177;
        drift_asym_priors_flat__ = context__.vals_r("drift_asym_priors");
        current_statement__ = 177;
        pos__ = 1;
        current_statement__ = 177;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 177;
          stan::model::assign(drift_asym_priors,
            drift_asym_priors_flat__[(pos__ - 1)],
            "assigning variable drift_asym_priors", stan::model::index_uni(sym1__));
          current_statement__ = 177;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 178;
      stan::math::validate_non_negative_index("Q0", "K", K);
      current_statement__ = 179;
      Q0__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&Q0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Q0__.data(), K);
      
      current_statement__ = 180;
      stan::math::validate_non_negative_index("RT", "N", N);
      current_statement__ = 181;
      RT__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&RT) Eigen::Map<Eigen::Matrix<double, -1, -1>>(RT__.data(), N, 2);
      
      current_statement__ = 182;
      stan::model::assign(Q0, stan::math::rep_vector(initial_value, K),
        "assigning variable Q0");
      current_statement__ = 186;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 183;
        stan::model::assign(RT,
          stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(1));
        current_statement__ = 184;
        stan::model::assign(RT,
          stan::model::rvalue(accuracy, "accuracy",
            stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(2));
      }
      current_statement__ = 187;
      stan::math::validate_non_negative_index("z_alpha_pos", "L", L);
      current_statement__ = 188;
      stan::math::validate_non_negative_index("z_alpha_neg", "L", L);
      current_statement__ = 189;
      stan::math::validate_non_negative_index("z_ndt", "L", L);
      current_statement__ = 190;
      stan::math::validate_non_negative_index("z_threshold", "L", L);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("z_slop", "L", L);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("z_drift_asym", "L", L);
      current_statement__ = 193;
      stan::math::validate_non_negative_index("z_drift_scaling", "L", L);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("threshold_t", "N", N);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("drift_cor_t", "N", N);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("drift_inc_t", "N", N);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("Q", "K", K);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("Q_mean_pres", "N", N);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("alpha_pos_sbj", "L", L);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("alpha_neg_sbj", "L", L);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("ndt_sbj", "L", L);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("threshold_sbj", "L", L);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("slop_sbj", "L", L);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("drift_asym_sbj", "L", L);
      current_statement__ = 206;
      stan::math::validate_non_negative_index("drift_scaling_sbj", "L", L);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 
      1 + 1 + L + L + L + L + L + L + L;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "hierRLRDM_2A_2lr_nonlin_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_alpha_pos = DUMMY_VAR__;
      current_statement__ = 1;
      mu_alpha_pos = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_alpha_neg = DUMMY_VAR__;
      current_statement__ = 2;
      mu_alpha_neg = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      current_statement__ = 3;
      mu_ndt = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_threshold = DUMMY_VAR__;
      current_statement__ = 4;
      mu_threshold = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_slop = DUMMY_VAR__;
      current_statement__ = 5;
      mu_slop = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_drift_asym = DUMMY_VAR__;
      current_statement__ = 6;
      mu_drift_asym = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_drift_scaling = DUMMY_VAR__;
      current_statement__ = 7;
      mu_drift_scaling = in__.template read<local_scalar_t__>();
      local_scalar_t__ sd_alpha_pos = DUMMY_VAR__;
      current_statement__ = 8;
      sd_alpha_pos = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      local_scalar_t__ sd_alpha_neg = DUMMY_VAR__;
      current_statement__ = 9;
      sd_alpha_neg = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      current_statement__ = 10;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sd_threshold = DUMMY_VAR__;
      current_statement__ = 11;
      sd_threshold = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      local_scalar_t__ sd_slop = DUMMY_VAR__;
      current_statement__ = 12;
      sd_slop = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ sd_drift_asym = DUMMY_VAR__;
      current_statement__ = 13;
      sd_drift_asym = in__.template read_constrain_lb<local_scalar_t__, 
                        jacobian__>(0, lp__);
      local_scalar_t__ sd_drift_scaling = DUMMY_VAR__;
      current_statement__ = 14;
      sd_drift_scaling = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      std::vector<local_scalar_t__> z_alpha_pos =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 15;
      z_alpha_pos = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_alpha_neg =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 16;
      z_alpha_neg = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_ndt =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 17;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_threshold =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 18;
      z_threshold = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_slop =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 19;
      z_slop = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_drift_asym =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 20;
      z_drift_asym = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_drift_scaling =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 21;
      z_drift_scaling = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<local_scalar_t__, -1, 1> ndt_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> threshold_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_cor_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_inc_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> Q =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      local_scalar_t__ Q_mean = DUMMY_VAR__;
      local_scalar_t__ Q_min = DUMMY_VAR__;
      local_scalar_t__ Q_min_t = DUMMY_VAR__;
      local_scalar_t__ Q_max_t = DUMMY_VAR__;
      local_scalar_t__ PE_cor = DUMMY_VAR__;
      local_scalar_t__ PE_inc = DUMMY_VAR__;
      std::vector<local_scalar_t__> Q_mean_pres =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> alpha_pos_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> alpha_neg_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> ndt_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> threshold_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> slop_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> drift_asym_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> drift_scaling_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      local_scalar_t__ transf_mu_alpha_pos = DUMMY_VAR__;
      local_scalar_t__ transf_mu_alpha_neg = DUMMY_VAR__;
      local_scalar_t__ transf_mu_drift_scaling = DUMMY_VAR__;
      local_scalar_t__ transf_mu_threshold = DUMMY_VAR__;
      local_scalar_t__ transf_mu_ndt = DUMMY_VAR__;
      local_scalar_t__ transf_mu_slop = DUMMY_VAR__;
      local_scalar_t__ transf_mu_drift_asym = DUMMY_VAR__;
      current_statement__ = 48;
      transf_mu_alpha_pos = stan::math::Phi(mu_alpha_pos);
      current_statement__ = 49;
      transf_mu_alpha_neg = stan::math::Phi(mu_alpha_neg);
      current_statement__ = 50;
      transf_mu_drift_scaling = stan::math::log(
                                  (1 + stan::math::exp(mu_drift_scaling)));
      current_statement__ = 51;
      transf_mu_threshold = stan::math::log(
                              (1 + stan::math::exp(mu_threshold)));
      current_statement__ = 52;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 53;
      transf_mu_slop = stan::math::log((1 + stan::math::exp(mu_slop)));
      current_statement__ = 54;
      transf_mu_drift_asym = stan::math::log(
                               (1 + stan::math::exp(mu_drift_asym)));
      current_statement__ = 63;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 55;
        stan::model::assign(alpha_pos_sbj,
          stan::math::Phi(
            (mu_alpha_pos +
              (stan::model::rvalue(z_alpha_pos, "z_alpha_pos",
                 stan::model::index_uni(l)) * sd_alpha_pos))),
          "assigning variable alpha_pos_sbj", stan::model::index_uni(l));
        current_statement__ = 56;
        stan::model::assign(alpha_neg_sbj,
          stan::math::Phi(
            (mu_alpha_neg +
              (stan::model::rvalue(z_alpha_neg, "z_alpha_neg",
                 stan::model::index_uni(l)) * sd_alpha_neg))),
          "assigning variable alpha_neg_sbj", stan::model::index_uni(l));
        current_statement__ = 57;
        stan::model::assign(drift_scaling_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_scaling +
                  (stan::model::rvalue(z_drift_scaling, "z_drift_scaling",
                     stan::model::index_uni(l)) * sd_drift_scaling))))),
          "assigning variable drift_scaling_sbj", stan::model::index_uni(l));
        current_statement__ = 58;
        stan::model::assign(threshold_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_threshold +
                  (stan::model::rvalue(z_threshold, "z_threshold",
                     stan::model::index_uni(l)) * sd_threshold))))),
          "assigning variable threshold_sbj", stan::model::index_uni(l));
        current_statement__ = 59;
        stan::model::assign(ndt_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_ndt +
                  (stan::model::rvalue(z_ndt, "z_ndt",
                     stan::model::index_uni(l)) * sd_ndt))))),
          "assigning variable ndt_sbj", stan::model::index_uni(l));
        current_statement__ = 60;
        stan::model::assign(slop_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_slop +
                  (stan::model::rvalue(z_slop, "z_slop",
                     stan::model::index_uni(l)) * sd_slop))))),
          "assigning variable slop_sbj", stan::model::index_uni(l));
        current_statement__ = 61;
        stan::model::assign(drift_asym_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_asym +
                  (stan::model::rvalue(z_drift_asym, "z_drift_asym",
                     stan::model::index_uni(l)) * sd_drift_asym))))),
          "assigning variable drift_asym_sbj", stan::model::index_uni(l));
      }
      current_statement__ = 119;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 71;
        if (stan::math::logical_eq(
              stan::model::rvalue(trial_block, "trial_block",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 69;
          if (stan::math::logical_eq(
                stan::model::rvalue(block_label, "block_label",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 67;
            stan::model::assign(Q, Q0, "assigning variable Q");
          } else {
            current_statement__ = 64;
            Q_mean = stan::math::mean(Q);
            current_statement__ = 65;
            stan::model::assign(Q, stan::math::rep_vector(Q_mean, K),
              "assigning variable Q");
          }
        } 
        current_statement__ = 72;
        Q_min = stan::math::min(Q);
        current_statement__ = 73;
        stan::model::assign(Q_mean_pres,
          ((stan::model::rvalue(Q, "Q",
              stan::model::index_uni(stan::model::rvalue(cor_option,
                                       "cor_option",
                                       stan::model::index_uni(n)))) +
             stan::model::rvalue(Q, "Q",
               stan::model::index_uni(stan::model::rvalue(inc_option,
                                        "inc_option",
                                        stan::model::index_uni(n))))) / 2),
          "assigning variable Q_mean_pres", stan::model::index_uni(n));
        current_statement__ = 80;
        if (stan::math::logical_lt(
              stan::model::rvalue(Q, "Q",
                stan::model::index_uni(stan::model::rvalue(cor_option,
                                         "cor_option",
                                         stan::model::index_uni(n)))),
              stan::model::rvalue(Q, "Q",
                stan::model::index_uni(stan::model::rvalue(inc_option,
                                         "inc_option",
                                         stan::model::index_uni(n)))))) {
          current_statement__ = 77;
          Q_min_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(cor_option,
                                               "cor_option",
                                               stan::model::index_uni(n))));
          current_statement__ = 78;
          Q_max_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(inc_option,
                                               "inc_option",
                                               stan::model::index_uni(n))));
        } else {
          current_statement__ = 74;
          Q_max_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(cor_option,
                                               "cor_option",
                                               stan::model::index_uni(n))));
          current_statement__ = 75;
          Q_min_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(inc_option,
                                               "inc_option",
                                               stan::model::index_uni(n))));
        }
        current_statement__ = 81;
        PE_cor = (stan::model::rvalue(f_cor, "f_cor",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(cor_option,
                                              "cor_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 82;
        PE_inc = (stan::model::rvalue(f_inc, "f_inc",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(inc_option,
                                              "inc_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 89;
        if (stan::math::logical_neq(Q_min_t, Q_max_t)) {
          current_statement__ = 86;
          stan::model::assign(drift_cor_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 +
                stan::math::exp(
                  (stan::model::rvalue(slop_sbj, "slop_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                       stan::model::index_uni(n)) -
                      stan::model::rvalue(Q, "Q",
                        stan::model::index_uni(stan::model::rvalue(
                                                 cor_option, "cor_option",
                                                 stan::model::index_uni(n))))))))),
            "assigning variable drift_cor_t", stan::model::index_uni(n));
          current_statement__ = 87;
          stan::model::assign(drift_inc_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 +
                stan::math::exp(
                  (stan::model::rvalue(slop_sbj, "slop_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                       stan::model::index_uni(n)) -
                      stan::model::rvalue(Q, "Q",
                        stan::model::index_uni(stan::model::rvalue(
                                                 inc_option, "inc_option",
                                                 stan::model::index_uni(n))))))))),
            "assigning variable drift_inc_t", stan::model::index_uni(n));
        } else {
          current_statement__ = 83;
          stan::model::assign(drift_cor_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 + stan::math::exp(0))),
            "assigning variable drift_cor_t", stan::model::index_uni(n));
          current_statement__ = 84;
          stan::model::assign(drift_inc_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 + stan::math::exp(0))),
            "assigning variable drift_inc_t", stan::model::index_uni(n));
        }
        current_statement__ = 90;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 91;
        stan::model::assign(threshold_t,
          stan::model::rvalue(threshold_sbj, "threshold_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 117;
        if (stan::math::logical_eq(
              stan::model::rvalue(feedback_type, "feedback_type",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 115;
          if (stan::math::logical_eq(
                stan::model::rvalue(accuracy, "accuracy",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 113;
            if (stan::math::logical_gte(PE_cor, 0)) {
              current_statement__ = 111;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(cor_option,
                                            "cor_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_cor)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 cor_option,
                                                                 "cor_option",
                                                                 stan::model::index_uni(n))));
            } else {
              current_statement__ = 109;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(cor_option,
                                            "cor_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_cor)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 cor_option,
                                                                 "cor_option",
                                                                 stan::model::index_uni(n))));
            }
          } else {
            current_statement__ = 107;
            if (stan::math::logical_gte(PE_inc, 0)) {
              current_statement__ = 105;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(inc_option,
                                            "inc_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_inc)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 inc_option,
                                                                 "inc_option",
                                                                 stan::model::index_uni(n))));
            } else {
              current_statement__ = 103;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(inc_option,
                                            "inc_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_inc)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 inc_option,
                                                                 "inc_option",
                                                                 stan::model::index_uni(n))));
            }
          }
        } else {
          current_statement__ = 96;
          if (stan::math::logical_gte(PE_cor, 0)) {
            current_statement__ = 94;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_cor)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               cor_option,
                                                               "cor_option",
                                                               stan::model::index_uni(n))));
          } else {
            current_statement__ = 92;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_cor)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               cor_option,
                                                               "cor_option",
                                                               stan::model::index_uni(n))));
          }
          current_statement__ = 101;
          if (stan::math::logical_gte(PE_inc, 0)) {
            current_statement__ = 99;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(inc_option,
                                          "inc_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_inc)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               inc_option,
                                                               "inc_option",
                                                               stan::model::index_uni(n))));
          } else {
            current_statement__ = 97;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(inc_option,
                                          "inc_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_inc)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               inc_option,
                                                               "inc_option",
                                                               stan::model::index_uni(n))));
          }
        }
      }
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "drift_cor_t",
                                            drift_cor_t, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "drift_inc_t",
                                            drift_inc_t, 0);
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "alpha_pos_sbj",
                                            alpha_pos_sbj, 0);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "alpha_pos_sbj",
                                         alpha_pos_sbj, 1);
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "alpha_neg_sbj",
                                            alpha_neg_sbj, 0);
      current_statement__ = 35;
      stan::math::check_less_or_equal(function__, "alpha_neg_sbj",
                                         alpha_neg_sbj, 1);
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "threshold_sbj",
                                            threshold_sbj, 0);
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "slop_sbj", slop_sbj, 0);
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "drift_asym_sbj",
                                            drift_asym_sbj, 0);
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "drift_scaling_sbj",
                                            drift_scaling_sbj, 0);
      {
        current_statement__ = 125;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_alpha_pos,
            stan::model::rvalue(alpha_pos_priors, "alpha_pos_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(alpha_pos_priors, "alpha_pos_priors",
              stan::model::index_uni(2))));
        current_statement__ = 126;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_alpha_neg,
            stan::model::rvalue(alpha_neg_priors, "alpha_neg_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(alpha_neg_priors, "alpha_neg_priors",
              stan::model::index_uni(2))));
        current_statement__ = 127;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(2))));
        current_statement__ = 128;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_threshold,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(2))));
        current_statement__ = 129;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_slop,
            stan::model::rvalue(slop_priors, "slop_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(slop_priors, "slop_priors",
              stan::model::index_uni(2))));
        current_statement__ = 130;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_drift_asym,
            stan::model::rvalue(drift_asym_priors, "drift_asym_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(drift_asym_priors, "drift_asym_priors",
              stan::model::index_uni(2))));
        current_statement__ = 131;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_drift_scaling,
            stan::model::rvalue(drift_scaling_priors, "drift_scaling_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(drift_scaling_priors, "drift_scaling_priors",
              stan::model::index_uni(2))));
        current_statement__ = 132;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_alpha_pos,
            stan::model::rvalue(alpha_pos_priors, "alpha_pos_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(alpha_pos_priors, "alpha_pos_priors",
              stan::model::index_uni(4))));
        current_statement__ = 133;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_alpha_neg,
            stan::model::rvalue(alpha_neg_priors, "alpha_neg_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(alpha_neg_priors, "alpha_neg_priors",
              stan::model::index_uni(4))));
        current_statement__ = 134;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(4))));
        current_statement__ = 135;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_threshold,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(4))));
        current_statement__ = 136;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_slop,
            stan::model::rvalue(slop_priors, "slop_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(slop_priors, "slop_priors",
              stan::model::index_uni(4))));
        current_statement__ = 137;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_drift_asym,
            stan::model::rvalue(drift_asym_priors, "drift_asym_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(drift_asym_priors, "drift_asym_priors",
              stan::model::index_uni(4))));
        current_statement__ = 138;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_drift_scaling,
            stan::model::rvalue(drift_scaling_priors, "drift_scaling_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(drift_scaling_priors, "drift_scaling_priors",
              stan::model::index_uni(4))));
        current_statement__ = 139;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_alpha_pos, 0, 1));
        current_statement__ = 140;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_alpha_neg, 0, 1));
        current_statement__ = 141;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_ndt, 0, 1));
        current_statement__ = 142;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_threshold, 0, 1));
        current_statement__ = 143;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_slop, 0, 1));
        current_statement__ = 144;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_drift_asym, 0, 1));
        current_statement__ = 145;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(z_drift_scaling, 0, 1));
        current_statement__ = 146;
        lp_accum__.add(
          race_lpdf<propto__>(RT, ndt_t, threshold_t, drift_cor_t,
            drift_inc_t, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "hierRLRDM_2A_2lr_nonlin_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_alpha_pos = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_alpha_pos = in__.template read<local_scalar_t__>();
      double mu_alpha_neg = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu_alpha_neg = in__.template read<local_scalar_t__>();
      double mu_ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_ndt = in__.template read<local_scalar_t__>();
      double mu_threshold = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mu_threshold = in__.template read<local_scalar_t__>();
      double mu_slop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_slop = in__.template read<local_scalar_t__>();
      double mu_drift_asym = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      mu_drift_asym = in__.template read<local_scalar_t__>();
      double mu_drift_scaling = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      mu_drift_scaling = in__.template read<local_scalar_t__>();
      double sd_alpha_pos = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sd_alpha_pos = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      double sd_alpha_neg = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sd_alpha_neg = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      double sd_ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sd_threshold = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      sd_threshold = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      double sd_slop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      sd_slop = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double sd_drift_asym = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      sd_drift_asym = in__.template read_constrain_lb<local_scalar_t__, 
                        jacobian__>(0, lp__);
      double sd_drift_scaling = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      sd_drift_scaling = in__.template read_constrain_lb<local_scalar_t__, 
                           jacobian__>(0, lp__);
      std::vector<double> z_alpha_pos =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      z_alpha_pos = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_alpha_neg =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      z_alpha_neg = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_ndt =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_threshold =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      z_threshold = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_slop =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      z_slop = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_drift_asym =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      z_drift_asym = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_drift_scaling =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      z_drift_scaling = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<double, -1, 1> ndt_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> threshold_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> drift_cor_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> drift_inc_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> Q =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      double Q_mean = std::numeric_limits<double>::quiet_NaN();
      double Q_min = std::numeric_limits<double>::quiet_NaN();
      double Q_min_t = std::numeric_limits<double>::quiet_NaN();
      double Q_max_t = std::numeric_limits<double>::quiet_NaN();
      double PE_cor = std::numeric_limits<double>::quiet_NaN();
      double PE_inc = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> Q_mean_pres =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> alpha_pos_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> alpha_neg_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ndt_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> threshold_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> slop_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> drift_asym_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> drift_scaling_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      double transf_mu_alpha_pos = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_alpha_neg = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_drift_scaling =
         std::numeric_limits<double>::quiet_NaN();
      double transf_mu_threshold = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_ndt = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_slop = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_drift_asym = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_alpha_pos);
      out__.write(mu_alpha_neg);
      out__.write(mu_ndt);
      out__.write(mu_threshold);
      out__.write(mu_slop);
      out__.write(mu_drift_asym);
      out__.write(mu_drift_scaling);
      out__.write(sd_alpha_pos);
      out__.write(sd_alpha_neg);
      out__.write(sd_ndt);
      out__.write(sd_threshold);
      out__.write(sd_slop);
      out__.write(sd_drift_asym);
      out__.write(sd_drift_scaling);
      out__.write(z_alpha_pos);
      out__.write(z_alpha_neg);
      out__.write(z_ndt);
      out__.write(z_threshold);
      out__.write(z_slop);
      out__.write(z_drift_asym);
      out__.write(z_drift_scaling);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 48;
      transf_mu_alpha_pos = stan::math::Phi(mu_alpha_pos);
      current_statement__ = 49;
      transf_mu_alpha_neg = stan::math::Phi(mu_alpha_neg);
      current_statement__ = 50;
      transf_mu_drift_scaling = stan::math::log(
                                  (1 + stan::math::exp(mu_drift_scaling)));
      current_statement__ = 51;
      transf_mu_threshold = stan::math::log(
                              (1 + stan::math::exp(mu_threshold)));
      current_statement__ = 52;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 53;
      transf_mu_slop = stan::math::log((1 + stan::math::exp(mu_slop)));
      current_statement__ = 54;
      transf_mu_drift_asym = stan::math::log(
                               (1 + stan::math::exp(mu_drift_asym)));
      current_statement__ = 63;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 55;
        stan::model::assign(alpha_pos_sbj,
          stan::math::Phi(
            (mu_alpha_pos +
              (stan::model::rvalue(z_alpha_pos, "z_alpha_pos",
                 stan::model::index_uni(l)) * sd_alpha_pos))),
          "assigning variable alpha_pos_sbj", stan::model::index_uni(l));
        current_statement__ = 56;
        stan::model::assign(alpha_neg_sbj,
          stan::math::Phi(
            (mu_alpha_neg +
              (stan::model::rvalue(z_alpha_neg, "z_alpha_neg",
                 stan::model::index_uni(l)) * sd_alpha_neg))),
          "assigning variable alpha_neg_sbj", stan::model::index_uni(l));
        current_statement__ = 57;
        stan::model::assign(drift_scaling_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_scaling +
                  (stan::model::rvalue(z_drift_scaling, "z_drift_scaling",
                     stan::model::index_uni(l)) * sd_drift_scaling))))),
          "assigning variable drift_scaling_sbj", stan::model::index_uni(l));
        current_statement__ = 58;
        stan::model::assign(threshold_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_threshold +
                  (stan::model::rvalue(z_threshold, "z_threshold",
                     stan::model::index_uni(l)) * sd_threshold))))),
          "assigning variable threshold_sbj", stan::model::index_uni(l));
        current_statement__ = 59;
        stan::model::assign(ndt_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_ndt +
                  (stan::model::rvalue(z_ndt, "z_ndt",
                     stan::model::index_uni(l)) * sd_ndt))))),
          "assigning variable ndt_sbj", stan::model::index_uni(l));
        current_statement__ = 60;
        stan::model::assign(slop_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_slop +
                  (stan::model::rvalue(z_slop, "z_slop",
                     stan::model::index_uni(l)) * sd_slop))))),
          "assigning variable slop_sbj", stan::model::index_uni(l));
        current_statement__ = 61;
        stan::model::assign(drift_asym_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_asym +
                  (stan::model::rvalue(z_drift_asym, "z_drift_asym",
                     stan::model::index_uni(l)) * sd_drift_asym))))),
          "assigning variable drift_asym_sbj", stan::model::index_uni(l));
      }
      current_statement__ = 119;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 71;
        if (stan::math::logical_eq(
              stan::model::rvalue(trial_block, "trial_block",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 69;
          if (stan::math::logical_eq(
                stan::model::rvalue(block_label, "block_label",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 67;
            stan::model::assign(Q, Q0, "assigning variable Q");
          } else {
            current_statement__ = 64;
            Q_mean = stan::math::mean(Q);
            current_statement__ = 65;
            stan::model::assign(Q, stan::math::rep_vector(Q_mean, K),
              "assigning variable Q");
          }
        } 
        current_statement__ = 72;
        Q_min = stan::math::min(Q);
        current_statement__ = 73;
        stan::model::assign(Q_mean_pres,
          ((stan::model::rvalue(Q, "Q",
              stan::model::index_uni(stan::model::rvalue(cor_option,
                                       "cor_option",
                                       stan::model::index_uni(n)))) +
             stan::model::rvalue(Q, "Q",
               stan::model::index_uni(stan::model::rvalue(inc_option,
                                        "inc_option",
                                        stan::model::index_uni(n))))) / 2),
          "assigning variable Q_mean_pres", stan::model::index_uni(n));
        current_statement__ = 80;
        if (stan::math::logical_lt(
              stan::model::rvalue(Q, "Q",
                stan::model::index_uni(stan::model::rvalue(cor_option,
                                         "cor_option",
                                         stan::model::index_uni(n)))),
              stan::model::rvalue(Q, "Q",
                stan::model::index_uni(stan::model::rvalue(inc_option,
                                         "inc_option",
                                         stan::model::index_uni(n)))))) {
          current_statement__ = 77;
          Q_min_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(cor_option,
                                               "cor_option",
                                               stan::model::index_uni(n))));
          current_statement__ = 78;
          Q_max_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(inc_option,
                                               "inc_option",
                                               stan::model::index_uni(n))));
        } else {
          current_statement__ = 74;
          Q_max_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(cor_option,
                                               "cor_option",
                                               stan::model::index_uni(n))));
          current_statement__ = 75;
          Q_min_t = stan::model::rvalue(Q, "Q",
                      stan::model::index_uni(stan::model::rvalue(inc_option,
                                               "inc_option",
                                               stan::model::index_uni(n))));
        }
        current_statement__ = 81;
        PE_cor = (stan::model::rvalue(f_cor, "f_cor",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(cor_option,
                                              "cor_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 82;
        PE_inc = (stan::model::rvalue(f_inc, "f_inc",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(inc_option,
                                              "inc_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 89;
        if (stan::math::logical_neq(Q_min_t, Q_max_t)) {
          current_statement__ = 86;
          stan::model::assign(drift_cor_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 +
                stan::math::exp(
                  (stan::model::rvalue(slop_sbj, "slop_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                       stan::model::index_uni(n)) -
                      stan::model::rvalue(Q, "Q",
                        stan::model::index_uni(stan::model::rvalue(
                                                 cor_option, "cor_option",
                                                 stan::model::index_uni(n))))))))),
            "assigning variable drift_cor_t", stan::model::index_uni(n));
          current_statement__ = 87;
          stan::model::assign(drift_inc_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 +
                stan::math::exp(
                  (stan::model::rvalue(slop_sbj, "slop_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                       stan::model::index_uni(n)) -
                      stan::model::rvalue(Q, "Q",
                        stan::model::index_uni(stan::model::rvalue(
                                                 inc_option, "inc_option",
                                                 stan::model::index_uni(n))))))))),
            "assigning variable drift_inc_t", stan::model::index_uni(n));
        } else {
          current_statement__ = 83;
          stan::model::assign(drift_cor_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 + stan::math::exp(0))),
            "assigning variable drift_cor_t", stan::model::index_uni(n));
          current_statement__ = 84;
          stan::model::assign(drift_inc_t,
            ((stan::model::rvalue(drift_scaling_sbj, "drift_scaling_sbj",
                stan::model::index_uni(stan::model::rvalue(participant,
                                         "participant",
                                         stan::model::index_uni(n)))) +
               ((0.1 *
                  stan::model::rvalue(drift_asym_sbj, "drift_asym_sbj",
                    stan::model::index_uni(stan::model::rvalue(participant,
                                             "participant",
                                             stan::model::index_uni(n))))) *
                 (stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                    stan::model::index_uni(n)) - Q_min))) /
              (1 + stan::math::exp(0))),
            "assigning variable drift_inc_t", stan::model::index_uni(n));
        }
        current_statement__ = 90;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 91;
        stan::model::assign(threshold_t,
          stan::model::rvalue(threshold_sbj, "threshold_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 117;
        if (stan::math::logical_eq(
              stan::model::rvalue(feedback_type, "feedback_type",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 115;
          if (stan::math::logical_eq(
                stan::model::rvalue(accuracy, "accuracy",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 113;
            if (stan::math::logical_gte(PE_cor, 0)) {
              current_statement__ = 111;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(cor_option,
                                            "cor_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_cor)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 cor_option,
                                                                 "cor_option",
                                                                 stan::model::index_uni(n))));
            } else {
              current_statement__ = 109;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(cor_option,
                                            "cor_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_cor)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 cor_option,
                                                                 "cor_option",
                                                                 stan::model::index_uni(n))));
            }
          } else {
            current_statement__ = 107;
            if (stan::math::logical_gte(PE_inc, 0)) {
              current_statement__ = 105;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(inc_option,
                                            "inc_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_inc)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 inc_option,
                                                                 "inc_option",
                                                                 stan::model::index_uni(n))));
            } else {
              current_statement__ = 103;
              stan::model::assign(Q,
                (stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(inc_option,
                                            "inc_option",
                                            stan::model::index_uni(n)))) +
                  (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                     stan::model::index_uni(stan::model::rvalue(participant,
                                              "participant",
                                              stan::model::index_uni(n)))) *
                    PE_inc)),
                "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                                 inc_option,
                                                                 "inc_option",
                                                                 stan::model::index_uni(n))));
            }
          }
        } else {
          current_statement__ = 96;
          if (stan::math::logical_gte(PE_cor, 0)) {
            current_statement__ = 94;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_cor)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               cor_option,
                                                               "cor_option",
                                                               stan::model::index_uni(n))));
          } else {
            current_statement__ = 92;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_cor)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               cor_option,
                                                               "cor_option",
                                                               stan::model::index_uni(n))));
          }
          current_statement__ = 101;
          if (stan::math::logical_gte(PE_inc, 0)) {
            current_statement__ = 99;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(inc_option,
                                          "inc_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_pos_sbj, "alpha_pos_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_inc)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               inc_option,
                                                               "inc_option",
                                                               stan::model::index_uni(n))));
          } else {
            current_statement__ = 97;
            stan::model::assign(Q,
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(inc_option,
                                          "inc_option",
                                          stan::model::index_uni(n)))) +
                (stan::model::rvalue(alpha_neg_sbj, "alpha_neg_sbj",
                   stan::model::index_uni(stan::model::rvalue(participant,
                                            "participant",
                                            stan::model::index_uni(n)))) *
                  PE_inc)),
              "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                               inc_option,
                                                               "inc_option",
                                                               stan::model::index_uni(n))));
          }
        }
      }
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "drift_cor_t",
                                            drift_cor_t, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "drift_inc_t",
                                            drift_inc_t, 0);
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "alpha_pos_sbj",
                                            alpha_pos_sbj, 0);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "alpha_pos_sbj",
                                         alpha_pos_sbj, 1);
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "alpha_neg_sbj",
                                            alpha_neg_sbj, 0);
      current_statement__ = 35;
      stan::math::check_less_or_equal(function__, "alpha_neg_sbj",
                                         alpha_neg_sbj, 1);
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "threshold_sbj",
                                            threshold_sbj, 0);
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "slop_sbj", slop_sbj, 0);
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "drift_asym_sbj",
                                            drift_asym_sbj, 0);
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "drift_scaling_sbj",
                                            drift_scaling_sbj, 0);
      if (emit_transformed_parameters__) {
        out__.write(ndt_t);
        out__.write(threshold_t);
        out__.write(drift_cor_t);
        out__.write(drift_inc_t);
        out__.write(Q);
        out__.write(Q_mean);
        out__.write(Q_min);
        out__.write(Q_min_t);
        out__.write(Q_max_t);
        out__.write(PE_cor);
        out__.write(PE_inc);
        out__.write(Q_mean_pres);
        out__.write(alpha_pos_sbj);
        out__.write(alpha_neg_sbj);
        out__.write(ndt_sbj);
        out__.write(threshold_sbj);
        out__.write(slop_sbj);
        out__.write(drift_asym_sbj);
        out__.write(drift_scaling_sbj);
        out__.write(transf_mu_alpha_pos);
        out__.write(transf_mu_alpha_neg);
        out__.write(transf_mu_drift_scaling);
        out__.write(transf_mu_threshold);
        out__.write(transf_mu_ndt);
        out__.write(transf_mu_slop);
        out__.write(transf_mu_drift_asym);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 123;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 121;
          stan::model::assign(log_lik,
            race_lpdf<false>(stan::math::block(RT, n, 1, 1, 2),
              stan::math::segment(ndt_t, n, 1),
              stan::math::segment(threshold_t, n, 1),
              stan::math::segment(drift_cor_t, n, 1),
              stan::math::segment(drift_inc_t, n, 1), pstream__),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_alpha_pos = DUMMY_VAR__;
      mu_alpha_pos = in__.read<local_scalar_t__>();
      out__.write(mu_alpha_pos);
      local_scalar_t__ mu_alpha_neg = DUMMY_VAR__;
      mu_alpha_neg = in__.read<local_scalar_t__>();
      out__.write(mu_alpha_neg);
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      mu_ndt = in__.read<local_scalar_t__>();
      out__.write(mu_ndt);
      local_scalar_t__ mu_threshold = DUMMY_VAR__;
      mu_threshold = in__.read<local_scalar_t__>();
      out__.write(mu_threshold);
      local_scalar_t__ mu_slop = DUMMY_VAR__;
      mu_slop = in__.read<local_scalar_t__>();
      out__.write(mu_slop);
      local_scalar_t__ mu_drift_asym = DUMMY_VAR__;
      mu_drift_asym = in__.read<local_scalar_t__>();
      out__.write(mu_drift_asym);
      local_scalar_t__ mu_drift_scaling = DUMMY_VAR__;
      mu_drift_scaling = in__.read<local_scalar_t__>();
      out__.write(mu_drift_scaling);
      local_scalar_t__ sd_alpha_pos = DUMMY_VAR__;
      sd_alpha_pos = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_alpha_pos);
      local_scalar_t__ sd_alpha_neg = DUMMY_VAR__;
      sd_alpha_neg = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_alpha_neg);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      sd_ndt = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_ndt);
      local_scalar_t__ sd_threshold = DUMMY_VAR__;
      sd_threshold = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_threshold);
      local_scalar_t__ sd_slop = DUMMY_VAR__;
      sd_slop = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_slop);
      local_scalar_t__ sd_drift_asym = DUMMY_VAR__;
      sd_drift_asym = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_drift_asym);
      local_scalar_t__ sd_drift_scaling = DUMMY_VAR__;
      sd_drift_scaling = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_drift_scaling);
      std::vector<local_scalar_t__> z_alpha_pos =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_alpha_pos[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_alpha_pos);
      std::vector<local_scalar_t__> z_alpha_neg =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_alpha_neg[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_alpha_neg);
      std::vector<local_scalar_t__> z_ndt =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_ndt[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_ndt);
      std::vector<local_scalar_t__> z_threshold =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_threshold[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_threshold);
      std::vector<local_scalar_t__> z_slop =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_slop[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_slop);
      std::vector<local_scalar_t__> z_drift_asym =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_drift_asym[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_drift_asym);
      std::vector<local_scalar_t__> z_drift_scaling =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_drift_scaling[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_drift_scaling);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_alpha_pos", "mu_alpha_neg",
      "mu_ndt", "mu_threshold", "mu_slop", "mu_drift_asym",
      "mu_drift_scaling", "sd_alpha_pos", "sd_alpha_neg", "sd_ndt",
      "sd_threshold", "sd_slop", "sd_drift_asym", "sd_drift_scaling",
      "z_alpha_pos", "z_alpha_neg", "z_ndt", "z_threshold", "z_slop",
      "z_drift_asym", "z_drift_scaling", "ndt_t", "threshold_t",
      "drift_cor_t", "drift_inc_t", "Q", "Q_mean", "Q_min", "Q_min_t",
      "Q_max_t", "PE_cor", "PE_inc", "Q_mean_pres", "alpha_pos_sbj",
      "alpha_neg_sbj", "ndt_sbj", "threshold_sbj", "slop_sbj",
      "drift_asym_sbj", "drift_scaling_sbj", "transf_mu_alpha_pos",
      "transf_mu_alpha_neg", "transf_mu_drift_scaling",
      "transf_mu_threshold", "transf_mu_ndt", "transf_mu_slop",
      "transf_mu_drift_asym", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_alpha_pos");
    param_names__.emplace_back(std::string() + "mu_alpha_neg");
    param_names__.emplace_back(std::string() + "mu_ndt");
    param_names__.emplace_back(std::string() + "mu_threshold");
    param_names__.emplace_back(std::string() + "mu_slop");
    param_names__.emplace_back(std::string() + "mu_drift_asym");
    param_names__.emplace_back(std::string() + "mu_drift_scaling");
    param_names__.emplace_back(std::string() + "sd_alpha_pos");
    param_names__.emplace_back(std::string() + "sd_alpha_neg");
    param_names__.emplace_back(std::string() + "sd_ndt");
    param_names__.emplace_back(std::string() + "sd_threshold");
    param_names__.emplace_back(std::string() + "sd_slop");
    param_names__.emplace_back(std::string() + "sd_drift_asym");
    param_names__.emplace_back(std::string() + "sd_drift_scaling");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha_pos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha_neg" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_ndt" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_threshold" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_slop" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_asym" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_scaling" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Q_mean");
      param_names__.emplace_back(std::string() + "Q_min");
      param_names__.emplace_back(std::string() + "Q_min_t");
      param_names__.emplace_back(std::string() + "Q_max_t");
      param_names__.emplace_back(std::string() + "PE_cor");
      param_names__.emplace_back(std::string() + "PE_inc");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q_mean_pres" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_pos_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_neg_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "slop_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_asym_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_scaling_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_mu_alpha_pos");
      param_names__.emplace_back(std::string() + "transf_mu_alpha_neg");
      param_names__.emplace_back(std::string() + "transf_mu_drift_scaling");
      param_names__.emplace_back(std::string() + "transf_mu_threshold");
      param_names__.emplace_back(std::string() + "transf_mu_ndt");
      param_names__.emplace_back(std::string() + "transf_mu_slop");
      param_names__.emplace_back(std::string() + "transf_mu_drift_asym");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_alpha_pos");
    param_names__.emplace_back(std::string() + "mu_alpha_neg");
    param_names__.emplace_back(std::string() + "mu_ndt");
    param_names__.emplace_back(std::string() + "mu_threshold");
    param_names__.emplace_back(std::string() + "mu_slop");
    param_names__.emplace_back(std::string() + "mu_drift_asym");
    param_names__.emplace_back(std::string() + "mu_drift_scaling");
    param_names__.emplace_back(std::string() + "sd_alpha_pos");
    param_names__.emplace_back(std::string() + "sd_alpha_neg");
    param_names__.emplace_back(std::string() + "sd_ndt");
    param_names__.emplace_back(std::string() + "sd_threshold");
    param_names__.emplace_back(std::string() + "sd_slop");
    param_names__.emplace_back(std::string() + "sd_drift_asym");
    param_names__.emplace_back(std::string() + "sd_drift_scaling");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha_pos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_alpha_neg" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_ndt" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_threshold" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_slop" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_asym" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_scaling" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Q_mean");
      param_names__.emplace_back(std::string() + "Q_min");
      param_names__.emplace_back(std::string() + "Q_min_t");
      param_names__.emplace_back(std::string() + "Q_max_t");
      param_names__.emplace_back(std::string() + "PE_cor");
      param_names__.emplace_back(std::string() + "PE_inc");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q_mean_pres" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_pos_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha_neg_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "slop_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_asym_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_scaling_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_mu_alpha_pos");
      param_names__.emplace_back(std::string() + "transf_mu_alpha_neg");
      param_names__.emplace_back(std::string() + "transf_mu_drift_scaling");
      param_names__.emplace_back(std::string() + "transf_mu_threshold");
      param_names__.emplace_back(std::string() + "transf_mu_ndt");
      param_names__.emplace_back(std::string() + "transf_mu_slop");
      param_names__.emplace_back(std::string() + "transf_mu_drift_asym");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_alpha_pos\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha_neg\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_slop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_asym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_alpha_pos\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_alpha_neg\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_slop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_asym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_alpha_pos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_alpha_neg\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_ndt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_threshold\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_slop\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_asym\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_scaling\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_cor_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_min\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_min_t\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_max_t\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean_pres\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_pos_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_neg_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"slop_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_asym_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_scaling_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_alpha_pos\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_alpha_neg\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_slop\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_asym\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_alpha_pos\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha_neg\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_slop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_asym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_alpha_pos\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_alpha_neg\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_slop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_asym\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_alpha_pos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_alpha_neg\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_ndt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_threshold\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_slop\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_asym\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_scaling\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_cor_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_min\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_min_t\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_max_t\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean_pres\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_pos_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"alpha_neg_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"slop_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_asym_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_scaling_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_alpha_pos\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_alpha_neg\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_slop\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_asym\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
             1) + 1) + 1) + L) + L) + L) + L) + L) + L) + L);
      const size_t num_transformed = 
  (((((((((((((((((((((((((N + N) + N) + N) + K) + 1) + 1) + 1) + 1) + 1) +
                   1) + N) + L) + L) + L) + L) + L) + L) + L) + 1) + 1) + 1)
       + 1) + 1) + 1) + 1);
      const size_t num_gen_quantities = N;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
             1) + 1) + 1) + L) + L) + L) + L) + L) + L) + L);
      const size_t num_transformed = 
  (((((((((((((((((((((((((N + N) + N) + N) + K) + 1) + 1) + 1) + 1) + 1) +
                   1) + N) + L) + L) + L) + L) + L) + L) + L) + 1) + 1) + 1)
       + 1) + 1) + 1) + 1);
      const size_t num_gen_quantities = N;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 21> names__{"mu_alpha_pos",
      "mu_alpha_neg", "mu_ndt", "mu_threshold", "mu_slop", "mu_drift_asym",
      "mu_drift_scaling", "sd_alpha_pos", "sd_alpha_neg", "sd_ndt",
      "sd_threshold", "sd_slop", "sd_drift_asym", "sd_drift_scaling",
      "z_alpha_pos", "z_alpha_neg", "z_ndt", "z_threshold", "z_slop",
      "z_drift_asym", "z_drift_scaling"};
      const std::array<Eigen::Index, 21> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, L, L, L, L, L, L, L};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = hierRLRDM_2A_2lr_nonlin_model_namespace::hierRLRDM_2A_2lr_nonlin_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return hierRLRDM_2A_2lr_nonlin_model_namespace::profiles__;
}

#endif


