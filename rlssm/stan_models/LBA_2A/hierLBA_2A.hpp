
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace hierLBA_2A_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 174> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 116, column 5 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 117, column 5 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 118, column 5 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 119, column 5 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 120, column 5 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 122, column 5 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 123, column 5 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 124, column 5 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 125, column 5 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 126, column 5 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 128, column 5 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 129, column 5 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 130, column 5 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 131, column 5 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 132, column 5 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 136, column 5 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 137, column 2 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 138, column 1 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 140, column 1 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 141, column 1 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 143, column 2 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 144, column 1 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 145, column 1 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 146, column 2 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 147, column 1 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 149, column 2 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 150, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 151, column 2 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 152, column 1 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 153, column 1 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 155, column 2 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 156, column 1 to column 56)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 157, column 1 to column 38)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 158, column 1 to column 50)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 159, column 1 to column 50)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 162, column 4 to column 48)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 163, column 2 to column 90)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 164, column 4 to column 56)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 165, column 2 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 166, column 2 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 161, column 17 to line 167, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 161, column 2 to line 167, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 170, column 4 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 171, column 2 to column 55)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 172, column 4 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 173, column 2 to column 49)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 174, column 2 to column 49)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 169, column 16 to line 175, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 169, column 1 to line 175, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 201, column 4 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 204, column 6 to column 180)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 203, column 19 to line 205, column 6)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 203, column 5 to line 205, column 6)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 202, column 3 to line 206, column 4)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 179, column 5 to column 45)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 180, column 5 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 181, column 5 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 182, column 5 to column 61)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 183, column 5 to column 61)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 186, column 5 to column 45)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 187, column 5 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 188, column 5 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 189, column 5 to column 61)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 190, column 5 to column 61)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 192, column 5 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 193, column 5 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 194, column 5 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 195, column 5 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 196, column 5 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 197, column 5 to column 68)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 92, column 1 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 93, column 2 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 95, column 36 to column 37)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 95, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 97, column 31 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 97, column 1 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 98, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 98, column 1 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 100, column 2 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 101, column 1 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 102, column 2 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 103, column 1 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 107, column 9 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 107, column 1 to column 18)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 110, column 4 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 111, column 4 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 109, column 15 to line 112, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 109, column 1 to line 112, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 128, column 14 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 129, column 25 to column 26)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 130, column 16 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 131, column 22 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 132, column 22 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 136, column 22 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 137, column 19 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 138, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 140, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 141, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 143, column 22 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 144, column 32 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 145, column 23 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 146, column 30 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 147, column 29 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 201, column 11 to column 12)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 5, column 10 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 6, column 10 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 7, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 8, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 9, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 10, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 11, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 13, column 10 to column 42)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 14, column 10 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 15, column 10 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 16, column 10 to column 52)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 17, column 10 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 18, column 10 to column 50)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 19, column 10 to column 59)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 21, column 10 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 3, column 57 to line 22, column 6)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 27, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 28, column 10 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 29, column 10 to column 18)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 30, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 31, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 32, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 33, column 10 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 34, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 36, column 10 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 37, column 10 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 38, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 39, column 10 to column 45)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 40, column 10 to column 43)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 41, column 10 to column 57)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 42, column 10 to column 55)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 43, column 10 to column 54)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 45, column 10 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 24, column 57 to line 47, column 6)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 51, column 10 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 52, column 10 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 53, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 54, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 55, column 17 to column 25)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 55, column 10 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 56, column 10 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 57, column 10 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 58, column 10 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 59, column 10 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 62, column 15 to column 42)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 63, column 15 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 83, column 20 to column 36)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 82, column 20 to line 84, column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 65, column 20 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 72, column 22 to column 76)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 73, column 22 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 71, column 24 to line 74, column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 68, column 22 to column 76)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 69, column 22 to column 78)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 67, column 36 to line 70, column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 67, column 20 to line 74, column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 75, column 20 to column 75)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 76, column 20 to column 38)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 77, column 20 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 79, column 25 to column 41)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 78, column 39 to line 80, column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 78, column 20 to line 80, column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 64, column 24 to line 82, column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 64, column 15 to line 84, column 16)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 61, column 31 to line 85, column 11)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 61, column 10 to line 85, column 11)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 86, column 10 to column 31)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 87, column 10 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_rlssm/rlssm/rlssm/stan_models/LBA_2A/hierLBA_2A.stan', line 49, column 108 to line 88, column 6)"};

struct lba_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__, typename T4__, typename T5__,
            stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>,
                       stan::promote_args_t<stan::value_type_t<T5__>>>
  operator()(const T0__& RT, const T1__& k, const T2__& sp_trial_var,
             const T3__& drift_cor, const T4__& drift_inc, const T5__& ndt,
             std::ostream* pstream__) const;
};
struct lba_pdf_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
  operator()(const T0__& t, const T1__& b, const T2__& A, const T3__& v,
             const T4__& s, std::ostream* pstream__) const;
};
struct lba_cdf_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
  operator()(const T0__& t, const T1__& b, const T2__& A, const T3__& v,
             const T4__& s, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
  lba_pdf(const T0__& t, const T1__& b, const T2__& A, const T3__& v,
          const T4__& s, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ b_A_tv_ts = DUMMY_VAR__;
      local_scalar_t__ b_tv_ts = DUMMY_VAR__;
      local_scalar_t__ term_1 = DUMMY_VAR__;
      local_scalar_t__ term_2 = DUMMY_VAR__;
      local_scalar_t__ term_3 = DUMMY_VAR__;
      local_scalar_t__ term_4 = DUMMY_VAR__;
      local_scalar_t__ pdf = DUMMY_VAR__;
      current_statement__ = 112;
      b_A_tv_ts = (((b - A) - (t * v)) / (t * s));
      current_statement__ = 113;
      b_tv_ts = ((b - (t * v)) / (t * s));
      current_statement__ = 114;
      term_1 = (v * stan::math::Phi(b_A_tv_ts));
      current_statement__ = 115;
      term_2 = (s *
                 stan::math::exp(
                   stan::math::normal_log<false>(b_A_tv_ts, 0, 1)));
      current_statement__ = 116;
      term_3 = (v * stan::math::Phi(b_tv_ts));
      current_statement__ = 117;
      term_4 = (s *
                 stan::math::exp(
                   stan::math::normal_log<false>(b_tv_ts, 0, 1)));
      current_statement__ = 118;
      pdf = ((1 / A) * (((-term_1 + term_2) + term_3) - term_4));
      current_statement__ = 119;
      return pdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
  lba_cdf(const T0__& t, const T1__& b, const T2__& A, const T3__& v,
          const T4__& s, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ b_A_tv = DUMMY_VAR__;
      local_scalar_t__ b_tv = DUMMY_VAR__;
      local_scalar_t__ ts = DUMMY_VAR__;
      local_scalar_t__ term_1 = DUMMY_VAR__;
      local_scalar_t__ term_2 = DUMMY_VAR__;
      local_scalar_t__ term_3 = DUMMY_VAR__;
      local_scalar_t__ term_4 = DUMMY_VAR__;
      local_scalar_t__ cdf = DUMMY_VAR__;
      current_statement__ = 129;
      b_A_tv = ((b - A) - (t * v));
      current_statement__ = 130;
      b_tv = (b - (t * v));
      current_statement__ = 131;
      ts = (t * s);
      current_statement__ = 132;
      term_1 = ((b_A_tv / A) * stan::math::Phi((b_A_tv / ts)));
      current_statement__ = 133;
      term_2 = ((b_tv / A) * stan::math::Phi((b_tv / ts)));
      current_statement__ = 134;
      term_3 = ((ts / A) *
                 stan::math::exp(
                   stan::math::normal_log<false>((b_A_tv / ts), 0, 1)));
      current_statement__ = 135;
      term_4 = ((ts / A) *
                 stan::math::exp(
                   stan::math::normal_log<false>((b_tv / ts), 0, 1)));
      current_statement__ = 136;
      cdf = ((((1 + term_1) - term_2) + term_3) - term_4);
      current_statement__ = 137;
      return cdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>,
                     stan::promote_args_t<stan::value_type_t<T5__>>>
  lba_lpdf(const T0__& RT_arg__, const T1__& k_arg__,
           const T2__& sp_trial_var_arg__, const T3__& drift_cor_arg__,
           const T4__& drift_inc_arg__, const T5__& ndt_arg__,
           std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>,
                                 stan::promote_args_t<stan::value_type_t<T5__>>>;
    int current_statement__ = 0; 
    const auto& RT = stan::math::to_ref(RT_arg__);
    const auto& k = stan::math::to_ref(k_arg__);
    const auto& sp_trial_var = stan::math::to_ref(sp_trial_var_arg__);
    const auto& drift_cor = stan::math::to_ref(drift_cor_arg__);
    const auto& drift_inc = stan::math::to_ref(drift_inc_arg__);
    const auto& ndt = stan::math::to_ref(ndt_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ t = DUMMY_VAR__;
      local_scalar_t__ b = DUMMY_VAR__;
      local_scalar_t__ cdf = DUMMY_VAR__;
      local_scalar_t__ pdf = DUMMY_VAR__;
      current_statement__ = 143;
      stan::math::validate_non_negative_index("prob", "rows(RT)",
                                              stan::math::rows(RT));
      Eigen::Matrix<local_scalar_t__, -1, 1> prob =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::rows(RT), DUMMY_VAR__);
      local_scalar_t__ out = DUMMY_VAR__;
      local_scalar_t__ prob_neg = DUMMY_VAR__;
      local_scalar_t__ s = DUMMY_VAR__;
      current_statement__ = 148;
      s = 1;
      current_statement__ = 170;
      for (int i = 1; i <= stan::math::rows(RT); ++i) {
        current_statement__ = 149;
        b = (stan::model::rvalue(sp_trial_var, "sp_trial_var",
               stan::model::index_uni(i)) +
              stan::model::rvalue(k, "k", stan::model::index_uni(i)));
        current_statement__ = 150;
        t = (stan::model::rvalue(RT, "RT",
               stan::model::index_uni(i), stan::model::index_uni(1)) -
              stan::model::rvalue(ndt, "ndt", stan::model::index_uni(i)));
        current_statement__ = 168;
        if (stan::math::logical_gt(t, 0)) {
          current_statement__ = 153;
          cdf = 1;
          current_statement__ = 160;
          if (stan::math::logical_eq(
                stan::model::rvalue(RT, "RT",
                  stan::model::index_uni(i), stan::model::index_uni(2)), 1)) {
            current_statement__ = 157;
            pdf = lba_pdf(t, b,
                    stan::model::rvalue(sp_trial_var, "sp_trial_var",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(drift_cor, "drift_cor",
                      stan::model::index_uni(i)), s, pstream__);
            current_statement__ = 158;
            cdf = (1 -
                    lba_cdf(t, b,
                      stan::model::rvalue(sp_trial_var, "sp_trial_var",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(drift_inc, "drift_inc",
                        stan::model::index_uni(i)), s, pstream__));
          } else {
            current_statement__ = 154;
            pdf = lba_pdf(t, b,
                    stan::model::rvalue(sp_trial_var, "sp_trial_var",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(drift_inc, "drift_inc",
                      stan::model::index_uni(i)), s, pstream__);
            current_statement__ = 155;
            cdf = (1 -
                    lba_cdf(t, b,
                      stan::model::rvalue(sp_trial_var, "sp_trial_var",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(drift_cor, "drift_cor",
                        stan::model::index_uni(i)), s, pstream__));
          }
          current_statement__ = 161;
          prob_neg = (stan::math::Phi(
                        (-stan::model::rvalue(drift_cor, "drift_cor",
                            stan::model::index_uni(i)) / s)) *
                       stan::math::Phi(
                         (-stan::model::rvalue(drift_inc, "drift_inc",
                             stan::model::index_uni(i)) / s)));
          current_statement__ = 162;
          stan::model::assign(prob, (pdf * cdf),
            "assigning variable prob", stan::model::index_uni(i));
          current_statement__ = 163;
          stan::model::assign(prob,
            (stan::model::rvalue(prob, "prob", stan::model::index_uni(i)) /
              (1 - prob_neg)),
            "assigning variable prob", stan::model::index_uni(i));
          current_statement__ = 166;
          if (stan::math::logical_lt(
                stan::model::rvalue(prob, "prob", stan::model::index_uni(i)),
                1e-10)) {
            current_statement__ = 164;
            stan::model::assign(prob, 1e-10,
              "assigning variable prob", stan::model::index_uni(i));
          } 
        } else {
          current_statement__ = 151;
          stan::model::assign(prob, 1e-10,
            "assigning variable prob", stan::model::index_uni(i));
        }
      }
      current_statement__ = 171;
      out = stan::math::sum(stan::math::log(prob));
      current_statement__ = 172;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_eigen_matrix_dynamic_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*,
          stan::require_col_vector_t<T5__>*>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>,
                     stan::promote_args_t<stan::value_type_t<T5__>>>
lba_lpdf_functor__::operator()(const T0__& RT, const T1__& k,
                               const T2__& sp_trial_var,
                               const T3__& drift_cor, const T4__& drift_inc,
                               const T5__& ndt, std::ostream* pstream__) 
const
{
  return lba_lpdf<propto__>(RT, k, sp_trial_var, drift_cor, drift_inc, ndt,
           pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
lba_pdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& A,
                              const T3__& v, const T4__& s,
                              std::ostream* pstream__)  const
{
  return lba_pdf(t, b, A, v, s, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*>
stan::promote_args_t<T0__, T1__, T2__, T3__, T4__>
lba_cdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& A,
                              const T3__& v, const T4__& s,
                              std::ostream* pstream__)  const
{
  return lba_cdf(t, b, A, v, s, pstream__);
}

 class hierLBA_2A_model final : public model_base_crtp<hierLBA_2A_model> {

 private:
  int N;
  int L;
  std::vector<int> participant;
  std::vector<int> accuracy;
  std::vector<double> rt;
  Eigen::Matrix<double, -1, 1> k_priors__;
  Eigen::Matrix<double, -1, 1> sp_trial_var_priors__;
  Eigen::Matrix<double, -1, 1> ndt_priors__;
  Eigen::Matrix<double, -1, 1> drift_priors__;
  Eigen::Matrix<double, -1, -1> RT__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> k_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> sp_trial_var_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ndt_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> drift_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> RT{nullptr, 0, 0};
 
 public:
  ~hierLBA_2A_model() { }
  
  inline std::string model_name() const final { return "hierLBA_2A_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  hierLBA_2A_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "hierLBA_2A_model_namespace::hierLBA_2A_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 71;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 71;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 72;
      context__.validate_dims("data initialization","L","int",
           std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      
      
      current_statement__ = 72;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("participant", "N", N);
      current_statement__ = 74;
      context__.validate_dims("data initialization","participant","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      participant = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 74;
      participant = context__.vals_i("participant");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "participant",
                                            participant, 1);
      current_statement__ = 74;
      stan::math::check_less_or_equal(function__, "participant", participant,
                                         L);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("accuracy", "N", N);
      current_statement__ = 76;
      context__.validate_dims("data initialization","accuracy","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      accuracy = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 76;
      accuracy = context__.vals_i("accuracy");
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "accuracy", accuracy, 1);
      current_statement__ = 76;
      stan::math::check_less_or_equal(function__, "accuracy", accuracy, 2);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 78;
      context__.validate_dims("data initialization","rt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 78;
      rt = context__.vals_r("rt");
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 79;
      context__.validate_dims("data initialization","k_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      k_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&k_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(k_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> k_priors_flat__;
        current_statement__ = 79;
        k_priors_flat__ = context__.vals_r("k_priors");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 79;
          stan::model::assign(k_priors, k_priors_flat__[(pos__ - 1)],
            "assigning variable k_priors", stan::model::index_uni(sym1__));
          current_statement__ = 79;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 80;
      context__.validate_dims("data initialization","sp_trial_var_priors",
          "double", std::vector<size_t>{static_cast<size_t>(4)});
      sp_trial_var_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&sp_trial_var_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(sp_trial_var_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> sp_trial_var_priors_flat__;
        current_statement__ = 80;
        sp_trial_var_priors_flat__ = context__.vals_r("sp_trial_var_priors");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 80;
          stan::model::assign(sp_trial_var_priors,
            sp_trial_var_priors_flat__[(pos__ - 1)],
            "assigning variable sp_trial_var_priors", stan::model::index_uni(sym1__));
          current_statement__ = 80;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 81;
      context__.validate_dims("data initialization","ndt_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      ndt_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ndt_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 81;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 81;
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          current_statement__ = 81;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 82;
      context__.validate_dims("data initialization","drift_priors","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      drift_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(4,
          std::numeric_limits<double>::quiet_NaN());
      new (&drift_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(drift_priors__.data(), 4);
        
      
      {
        std::vector<local_scalar_t__> drift_priors_flat__;
        current_statement__ = 82;
        drift_priors_flat__ = context__.vals_r("drift_priors");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 82;
          stan::model::assign(drift_priors, drift_priors_flat__[(pos__ - 1)],
            "assigning variable drift_priors", stan::model::index_uni(sym1__));
          current_statement__ = 82;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 83;
      stan::math::validate_non_negative_index("RT", "N", N);
      current_statement__ = 84;
      RT__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&RT) Eigen::Map<Eigen::Matrix<double, -1, -1>>(RT__.data(), N, 2);
      
      current_statement__ = 88;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 85;
        stan::model::assign(RT,
          stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(1));
        current_statement__ = 86;
        stan::model::assign(RT,
          stan::model::rvalue(accuracy, "accuracy",
            stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(2));
      }
      current_statement__ = 89;
      stan::math::validate_non_negative_index("z_k", "L", L);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("z_sp_trial_var", "L", L);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("z_ndt", "L", L);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("z_drift_cor", "L", L);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("z_drift_inc", "L", L);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("k_t", "N", N);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("sp_trial_var_t", "N", N);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("drift_cor_t", "N", N);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("drift_inc_t", "N", N);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("k_sbj", "L", L);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("sp_trial_var_sbj", "L", L);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("ndt_sbj", "L", L);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("drift_cor_sbj", "L", L);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("drift_inc_sbj", "L", L);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + L + L + 
      L + L + L;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "hierLBA_2A_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_k = DUMMY_VAR__;
      current_statement__ = 1;
      mu_k = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_sp_trial_var = DUMMY_VAR__;
      current_statement__ = 2;
      mu_sp_trial_var = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      current_statement__ = 3;
      mu_ndt = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_drift_cor = DUMMY_VAR__;
      current_statement__ = 4;
      mu_drift_cor = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_drift_inc = DUMMY_VAR__;
      current_statement__ = 5;
      mu_drift_inc = in__.template read<local_scalar_t__>();
      local_scalar_t__ sd_k = DUMMY_VAR__;
      current_statement__ = 6;
      sd_k = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sd_sp_trial_var = DUMMY_VAR__;
      current_statement__ = 7;
      sd_sp_trial_var = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      current_statement__ = 8;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ sd_drift_cor = DUMMY_VAR__;
      current_statement__ = 9;
      sd_drift_cor = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      local_scalar_t__ sd_drift_inc = DUMMY_VAR__;
      current_statement__ = 10;
      sd_drift_inc = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      std::vector<local_scalar_t__> z_k =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 11;
      z_k = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_sp_trial_var =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 12;
      z_sp_trial_var = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_ndt =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 13;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_drift_cor =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 14;
      z_drift_cor = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_drift_inc =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 15;
      z_drift_inc = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<local_scalar_t__, -1, 1> ndt_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> k_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sp_trial_var_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_cor_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_inc_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> k_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> sp_trial_var_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> ndt_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> drift_cor_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> drift_inc_sbj =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      local_scalar_t__ transf_mu_k = DUMMY_VAR__;
      local_scalar_t__ transf_mu_sp_trial_var = DUMMY_VAR__;
      local_scalar_t__ transf_mu_ndt = DUMMY_VAR__;
      local_scalar_t__ transf_mu_drift_cor = DUMMY_VAR__;
      local_scalar_t__ transf_mu_drift_inc = DUMMY_VAR__;
      current_statement__ = 31;
      transf_mu_k = stan::math::log((1 + stan::math::exp(mu_k)));
      current_statement__ = 32;
      transf_mu_sp_trial_var = stan::math::log(
                                 (1 + stan::math::exp(mu_sp_trial_var)));
      current_statement__ = 33;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 34;
      transf_mu_drift_cor = stan::math::log(
                              (1 + stan::math::exp(mu_drift_cor)));
      current_statement__ = 35;
      transf_mu_drift_inc = stan::math::log(
                              (1 + stan::math::exp(mu_drift_inc)));
      current_statement__ = 42;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 36;
        stan::model::assign(k_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_k +
                  (stan::model::rvalue(z_k, "z_k", stan::model::index_uni(l))
                    * sd_k))))),
          "assigning variable k_sbj", stan::model::index_uni(l));
        current_statement__ = 37;
        stan::model::assign(sp_trial_var_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_sp_trial_var +
                  (stan::model::rvalue(z_sp_trial_var, "z_sp_trial_var",
                     stan::model::index_uni(l)) * sd_sp_trial_var))))),
          "assigning variable sp_trial_var_sbj", stan::model::index_uni(l));
        current_statement__ = 38;
        stan::model::assign(ndt_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_ndt +
                  (stan::model::rvalue(z_ndt, "z_ndt",
                     stan::model::index_uni(l)) * sd_ndt))))),
          "assigning variable ndt_sbj", stan::model::index_uni(l));
        current_statement__ = 39;
        stan::model::assign(drift_cor_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_cor +
                  (stan::model::rvalue(z_drift_cor, "z_drift_cor",
                     stan::model::index_uni(l)) * sd_drift_cor))))),
          "assigning variable drift_cor_sbj", stan::model::index_uni(l));
        current_statement__ = 40;
        stan::model::assign(drift_inc_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_inc +
                  (stan::model::rvalue(z_drift_inc, "z_drift_inc",
                     stan::model::index_uni(l)) * sd_drift_inc))))),
          "assigning variable drift_inc_sbj", stan::model::index_uni(l));
      }
      current_statement__ = 49;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 43;
        stan::model::assign(k_t,
          stan::model::rvalue(k_sbj, "k_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable k_t", stan::model::index_uni(n));
        current_statement__ = 44;
        stan::model::assign(sp_trial_var_t,
          stan::model::rvalue(sp_trial_var_sbj, "sp_trial_var_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable sp_trial_var_t", stan::model::index_uni(n));
        current_statement__ = 45;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 46;
        stan::model::assign(drift_cor_t,
          stan::model::rvalue(drift_cor_sbj, "drift_cor_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable drift_cor_t", stan::model::index_uni(n));
        current_statement__ = 47;
        stan::model::assign(drift_inc_t,
          stan::model::rvalue(drift_inc_sbj, "drift_inc_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable drift_inc_t", stan::model::index_uni(n));
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "k_t", k_t, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "sp_trial_var_t",
                                            sp_trial_var_t, 0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "drift_cor_t",
                                            drift_cor_t, 0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "drift_inc_t",
                                            drift_inc_t, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "k_sbj", k_sbj, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "sp_trial_var_sbj",
                                            sp_trial_var_sbj, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "drift_cor_sbj",
                                            drift_cor_sbj, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "drift_inc_sbj",
                                            drift_inc_sbj, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "transf_mu_k",
                                            transf_mu_k, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "transf_mu_sp_trial_var",
                                            transf_mu_sp_trial_var, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "transf_mu_ndt",
                                            transf_mu_ndt, 0);
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "transf_mu_drift_cor",
                                            transf_mu_drift_cor, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "transf_mu_drift_inc",
                                            transf_mu_drift_inc, 0);
      {
        current_statement__ = 55;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_k,
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(2))));
        current_statement__ = 56;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_sp_trial_var,
            stan::model::rvalue(sp_trial_var_priors, "sp_trial_var_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(sp_trial_var_priors, "sp_trial_var_priors",
              stan::model::index_uni(2))));
        current_statement__ = 57;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(2))));
        current_statement__ = 58;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_drift_cor,
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(2))));
        current_statement__ = 59;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_drift_inc,
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(2))));
        current_statement__ = 60;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_k,
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(k_priors, "k_priors",
              stan::model::index_uni(4))));
        current_statement__ = 61;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_sp_trial_var,
            stan::model::rvalue(sp_trial_var_priors, "sp_trial_var_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(sp_trial_var_priors, "sp_trial_var_priors",
              stan::model::index_uni(4))));
        current_statement__ = 62;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(4))));
        current_statement__ = 63;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_drift_cor,
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(4))));
        current_statement__ = 64;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(sd_drift_inc,
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(3)),
            stan::model::rvalue(drift_priors, "drift_priors",
              stan::model::index_uni(4))));
        current_statement__ = 65;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_k, 0, 1));
        current_statement__ = 66;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(z_sp_trial_var, 0, 1));
        current_statement__ = 67;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_ndt, 0, 1));
        current_statement__ = 68;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_drift_cor, 0, 1));
        current_statement__ = 69;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_drift_inc, 0, 1));
        current_statement__ = 70;
        lp_accum__.add(
          lba_lpdf<propto__>(RT, k_t, sp_trial_var_t, drift_cor_t,
            drift_inc_t, ndt_t, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "hierLBA_2A_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu_k = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_k = in__.template read<local_scalar_t__>();
      double mu_sp_trial_var = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu_sp_trial_var = in__.template read<local_scalar_t__>();
      double mu_ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_ndt = in__.template read<local_scalar_t__>();
      double mu_drift_cor = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mu_drift_cor = in__.template read<local_scalar_t__>();
      double mu_drift_inc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_drift_inc = in__.template read<local_scalar_t__>();
      double sd_k = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sd_k = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sd_sp_trial_var = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sd_sp_trial_var = in__.template read_constrain_lb<local_scalar_t__, 
                          jacobian__>(0, lp__);
      double sd_ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double sd_drift_cor = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sd_drift_cor = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      double sd_drift_inc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sd_drift_inc = in__.template read_constrain_lb<local_scalar_t__, 
                       jacobian__>(0, lp__);
      std::vector<double> z_k =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      z_k = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_sp_trial_var =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      z_sp_trial_var = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_ndt =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_drift_cor =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      z_drift_cor = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_drift_inc =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      z_drift_inc = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<double, -1, 1> ndt_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> k_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> sp_trial_var_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> drift_cor_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> drift_inc_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<double> k_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> sp_trial_var_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ndt_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> drift_cor_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> drift_inc_sbj =
         std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      double transf_mu_k = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_sp_trial_var =
         std::numeric_limits<double>::quiet_NaN();
      double transf_mu_ndt = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_drift_cor = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_drift_inc = std::numeric_limits<double>::quiet_NaN();
      out__.write(mu_k);
      out__.write(mu_sp_trial_var);
      out__.write(mu_ndt);
      out__.write(mu_drift_cor);
      out__.write(mu_drift_inc);
      out__.write(sd_k);
      out__.write(sd_sp_trial_var);
      out__.write(sd_ndt);
      out__.write(sd_drift_cor);
      out__.write(sd_drift_inc);
      out__.write(z_k);
      out__.write(z_sp_trial_var);
      out__.write(z_ndt);
      out__.write(z_drift_cor);
      out__.write(z_drift_inc);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 31;
      transf_mu_k = stan::math::log((1 + stan::math::exp(mu_k)));
      current_statement__ = 32;
      transf_mu_sp_trial_var = stan::math::log(
                                 (1 + stan::math::exp(mu_sp_trial_var)));
      current_statement__ = 33;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 34;
      transf_mu_drift_cor = stan::math::log(
                              (1 + stan::math::exp(mu_drift_cor)));
      current_statement__ = 35;
      transf_mu_drift_inc = stan::math::log(
                              (1 + stan::math::exp(mu_drift_inc)));
      current_statement__ = 42;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 36;
        stan::model::assign(k_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_k +
                  (stan::model::rvalue(z_k, "z_k", stan::model::index_uni(l))
                    * sd_k))))),
          "assigning variable k_sbj", stan::model::index_uni(l));
        current_statement__ = 37;
        stan::model::assign(sp_trial_var_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_sp_trial_var +
                  (stan::model::rvalue(z_sp_trial_var, "z_sp_trial_var",
                     stan::model::index_uni(l)) * sd_sp_trial_var))))),
          "assigning variable sp_trial_var_sbj", stan::model::index_uni(l));
        current_statement__ = 38;
        stan::model::assign(ndt_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_ndt +
                  (stan::model::rvalue(z_ndt, "z_ndt",
                     stan::model::index_uni(l)) * sd_ndt))))),
          "assigning variable ndt_sbj", stan::model::index_uni(l));
        current_statement__ = 39;
        stan::model::assign(drift_cor_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_cor +
                  (stan::model::rvalue(z_drift_cor, "z_drift_cor",
                     stan::model::index_uni(l)) * sd_drift_cor))))),
          "assigning variable drift_cor_sbj", stan::model::index_uni(l));
        current_statement__ = 40;
        stan::model::assign(drift_inc_sbj,
          stan::math::log(
            (1 +
              stan::math::exp(
                (mu_drift_inc +
                  (stan::model::rvalue(z_drift_inc, "z_drift_inc",
                     stan::model::index_uni(l)) * sd_drift_inc))))),
          "assigning variable drift_inc_sbj", stan::model::index_uni(l));
      }
      current_statement__ = 49;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 43;
        stan::model::assign(k_t,
          stan::model::rvalue(k_sbj, "k_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable k_t", stan::model::index_uni(n));
        current_statement__ = 44;
        stan::model::assign(sp_trial_var_t,
          stan::model::rvalue(sp_trial_var_sbj, "sp_trial_var_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable sp_trial_var_t", stan::model::index_uni(n));
        current_statement__ = 45;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 46;
        stan::model::assign(drift_cor_t,
          stan::model::rvalue(drift_cor_sbj, "drift_cor_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable drift_cor_t", stan::model::index_uni(n));
        current_statement__ = 47;
        stan::model::assign(drift_inc_t,
          stan::model::rvalue(drift_inc_sbj, "drift_inc_sbj",
            stan::model::index_uni(stan::model::rvalue(participant,
                                     "participant",
                                     stan::model::index_uni(n)))),
          "assigning variable drift_inc_t", stan::model::index_uni(n));
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "k_t", k_t, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "sp_trial_var_t",
                                            sp_trial_var_t, 0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "drift_cor_t",
                                            drift_cor_t, 0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "drift_inc_t",
                                            drift_inc_t, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "k_sbj", k_sbj, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "sp_trial_var_sbj",
                                            sp_trial_var_sbj, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "drift_cor_sbj",
                                            drift_cor_sbj, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "drift_inc_sbj",
                                            drift_inc_sbj, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "transf_mu_k",
                                            transf_mu_k, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "transf_mu_sp_trial_var",
                                            transf_mu_sp_trial_var, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "transf_mu_ndt",
                                            transf_mu_ndt, 0);
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "transf_mu_drift_cor",
                                            transf_mu_drift_cor, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "transf_mu_drift_inc",
                                            transf_mu_drift_inc, 0);
      if (emit_transformed_parameters__) {
        out__.write(ndt_t);
        out__.write(k_t);
        out__.write(sp_trial_var_t);
        out__.write(drift_cor_t);
        out__.write(drift_inc_t);
        out__.write(k_sbj);
        out__.write(sp_trial_var_sbj);
        out__.write(ndt_sbj);
        out__.write(drift_cor_sbj);
        out__.write(drift_inc_sbj);
        out__.write(transf_mu_k);
        out__.write(transf_mu_sp_trial_var);
        out__.write(transf_mu_ndt);
        out__.write(transf_mu_drift_cor);
        out__.write(transf_mu_drift_inc);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 53;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 51;
          stan::model::assign(log_lik,
            lba_lpdf<false>(stan::math::block(RT, n, 1, 1, 2),
              stan::math::segment(k_t, n, 1),
              stan::math::segment(sp_trial_var_t, n, 1),
              stan::math::segment(drift_cor_t, n, 1),
              stan::math::segment(drift_inc_t, n, 1),
              stan::math::segment(ndt_t, n, 1), pstream__),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu_k = DUMMY_VAR__;
      mu_k = in__.read<local_scalar_t__>();
      out__.write(mu_k);
      local_scalar_t__ mu_sp_trial_var = DUMMY_VAR__;
      mu_sp_trial_var = in__.read<local_scalar_t__>();
      out__.write(mu_sp_trial_var);
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      mu_ndt = in__.read<local_scalar_t__>();
      out__.write(mu_ndt);
      local_scalar_t__ mu_drift_cor = DUMMY_VAR__;
      mu_drift_cor = in__.read<local_scalar_t__>();
      out__.write(mu_drift_cor);
      local_scalar_t__ mu_drift_inc = DUMMY_VAR__;
      mu_drift_inc = in__.read<local_scalar_t__>();
      out__.write(mu_drift_inc);
      local_scalar_t__ sd_k = DUMMY_VAR__;
      sd_k = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_k);
      local_scalar_t__ sd_sp_trial_var = DUMMY_VAR__;
      sd_sp_trial_var = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_sp_trial_var);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      sd_ndt = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_ndt);
      local_scalar_t__ sd_drift_cor = DUMMY_VAR__;
      sd_drift_cor = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_drift_cor);
      local_scalar_t__ sd_drift_inc = DUMMY_VAR__;
      sd_drift_inc = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_drift_inc);
      std::vector<local_scalar_t__> z_k =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_k[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_k);
      std::vector<local_scalar_t__> z_sp_trial_var =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_sp_trial_var[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_sp_trial_var);
      std::vector<local_scalar_t__> z_ndt =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_ndt[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_ndt);
      std::vector<local_scalar_t__> z_drift_cor =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_drift_cor[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_drift_cor);
      std::vector<local_scalar_t__> z_drift_inc =
         std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        z_drift_inc[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(z_drift_inc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_k", "mu_sp_trial_var", "mu_ndt",
      "mu_drift_cor", "mu_drift_inc", "sd_k", "sd_sp_trial_var", "sd_ndt",
      "sd_drift_cor", "sd_drift_inc", "z_k", "z_sp_trial_var", "z_ndt",
      "z_drift_cor", "z_drift_inc", "ndt_t", "k_t", "sp_trial_var_t",
      "drift_cor_t", "drift_inc_t", "k_sbj", "sp_trial_var_sbj", "ndt_sbj",
      "drift_cor_sbj", "drift_inc_sbj", "transf_mu_k",
      "transf_mu_sp_trial_var", "transf_mu_ndt", "transf_mu_drift_cor",
      "transf_mu_drift_inc", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)},
      std::vector<size_t>{static_cast<size_t>(L)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_k");
    param_names__.emplace_back(std::string() + "mu_sp_trial_var");
    param_names__.emplace_back(std::string() + "mu_ndt");
    param_names__.emplace_back(std::string() + "mu_drift_cor");
    param_names__.emplace_back(std::string() + "mu_drift_inc");
    param_names__.emplace_back(std::string() + "sd_k");
    param_names__.emplace_back(std::string() + "sd_sp_trial_var");
    param_names__.emplace_back(std::string() + "sd_ndt");
    param_names__.emplace_back(std::string() + "sd_drift_cor");
    param_names__.emplace_back(std::string() + "sd_drift_inc");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_k" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_sp_trial_var" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_ndt" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_cor" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_inc" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sp_trial_var_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sp_trial_var_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_mu_k");
      param_names__.emplace_back(std::string() + "transf_mu_sp_trial_var");
      param_names__.emplace_back(std::string() + "transf_mu_ndt");
      param_names__.emplace_back(std::string() + "transf_mu_drift_cor");
      param_names__.emplace_back(std::string() + "transf_mu_drift_inc");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_k");
    param_names__.emplace_back(std::string() + "mu_sp_trial_var");
    param_names__.emplace_back(std::string() + "mu_ndt");
    param_names__.emplace_back(std::string() + "mu_drift_cor");
    param_names__.emplace_back(std::string() + "mu_drift_inc");
    param_names__.emplace_back(std::string() + "sd_k");
    param_names__.emplace_back(std::string() + "sd_sp_trial_var");
    param_names__.emplace_back(std::string() + "sd_ndt");
    param_names__.emplace_back(std::string() + "sd_drift_cor");
    param_names__.emplace_back(std::string() + "sd_drift_inc");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_k" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_sp_trial_var" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_ndt" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_cor" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_drift_inc" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sp_trial_var_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sp_trial_var_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_sbj" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "transf_mu_k");
      param_names__.emplace_back(std::string() + "transf_mu_sp_trial_var");
      param_names__.emplace_back(std::string() + "transf_mu_ndt");
      param_names__.emplace_back(std::string() + "transf_mu_drift_cor");
      param_names__.emplace_back(std::string() + "transf_mu_drift_inc");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_sp_trial_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_cor\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_inc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_sp_trial_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_cor\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_inc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_sp_trial_var\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_ndt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_cor\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_inc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sp_trial_var_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_cor_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"sp_trial_var_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_cor_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_sp_trial_var\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_sp_trial_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_cor\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_drift_inc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_sp_trial_var\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_cor\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_drift_inc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_k\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_sp_trial_var\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_ndt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_cor\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_drift_inc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sp_trial_var_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_cor_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"k_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"sp_trial_var_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_cor_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_k\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_sp_trial_var\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_drift_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + L) + L) + L)
     + L) + L);
      const size_t num_transformed = ((((((((((((((N + N) +
                                                                   N) + N) +
                                                                 N) + L) + L)
                                                              + L) + L) + L)
                                                           + 1) + 1) + 1) +
                                                        1) + 1);
      const size_t num_gen_quantities = N;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + L) + L) + L)
     + L) + L);
      const size_t num_transformed = ((((((((((((((N + N) +
                                                                   N) + N) +
                                                                 N) + L) + L)
                                                              + L) + L) + L)
                                                           + 1) + 1) + 1) +
                                                        1) + 1);
      const size_t num_gen_quantities = N;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 15> names__{"mu_k", "mu_sp_trial_var",
      "mu_ndt", "mu_drift_cor", "mu_drift_inc", "sd_k", "sd_sp_trial_var",
      "sd_ndt", "sd_drift_cor", "sd_drift_inc", "z_k", "z_sp_trial_var",
      "z_ndt", "z_drift_cor", "z_drift_inc"};
      const std::array<Eigen::Index, 15> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1, 1, 1, 1, L, L, L, L, L};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = hierLBA_2A_model_namespace::hierLBA_2A_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return hierLBA_2A_model_namespace::profiles__;
}

#endif


