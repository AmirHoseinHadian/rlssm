
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace RLDDM_thrmod_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 93> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 28, column 1 to column 12)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 29, column 1 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 30, column 1 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 31, column 1 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 32, column 1 to column 10)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 35, column 1 to column 18)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 36, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 37, column 1 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 38, column 1 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 40, column 1 to column 13)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 42, column 1 to column 13)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 43, column 1 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 44, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 45, column 1 to column 13)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 46, column 1 to column 13)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 48, column 1 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 49, column 1 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 50, column 1 to column 23)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 51, column 1 to column 34)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 52, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 54, column 1 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 55, column 1 to column 52)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 56, column 1 to column 44)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 57, column 1 to column 52)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 58, column 1 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 65, column 4 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 66, column 4 to column 30)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 64, column 10 to line 67, column 4)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 63, column 4 to column 11)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 62, column 28 to line 64, column 4)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 62, column 3 to line 67, column 4)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 61, column 27 to line 68, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 61, column 2 to line 68, column 3)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 69, column 2 to column 59)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 70, column 2 to column 51)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 71, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 72, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 74, column 2 to column 47)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 75, column 2 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 76, column 2 to column 81)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 77, column 2 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 79, column 2 to column 60)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 80, column 2 to column 60)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 60, column 16 to line 81, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 60, column 1 to line 81, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 93, column 1 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 96, column 2 to column 90)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 95, column 17 to line 97, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 95, column 2 to line 97, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 95, column 1 to line 98, column 2)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 84, column 1 to column 50)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 85, column 1 to column 74)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 86, column 1 to column 62)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 87, column 1 to column 95)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 88, column 1 to column 44)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 90, column 1 to column 59)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 2, column 1 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 3, column 1 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 4, column 26 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 4, column 1 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 5, column 8 to column 9)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 5, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 6, column 8 to column 9)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 6, column 1 to column 17)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 7, column 34 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 7, column 1 to column 37)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 8, column 34 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 8, column 1 to column 37)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 9, column 26 to column 27)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 9, column 1 to column 29)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 11, column 32 to column 33)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 11, column 1 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 12, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 12, column 1 to column 21)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 14, column 1 to column 20)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 16, column 1 to column 24)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 17, column 1 to column 32)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 18, column 1 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 19, column 1 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 20, column 1 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 21, column 1 to column 39)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 24, column 8 to column 9)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 24, column 1 to column 14)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 25, column 1 to column 35)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 35, column 15 to column 16)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 36, column 14 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 37, column 27 to column 28)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 38, column 21 to column 22)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 40, column 8 to column 9)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 43, column 18 to column 19)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 44, column 14 to column 15)",
 " (in '/Users/khamir/_DecisionMaking/_Reports/_10/rlssm/rlssm/stan_models/RLDDM_thrmod.stan', line 93, column 8 to column 9)"};




class RLDDM_thrmod_model final : public model_base_crtp<RLDDM_thrmod_model> {

 private:
  int N;
  int K;
  std::vector<int> trial_block;
  Eigen::Matrix<double, -1, 1> f_cor__;
  Eigen::Matrix<double, -1, 1> f_inc__;
  std::vector<int> cor_option;
  std::vector<int> inc_option;
  std::vector<int> block_label;
  std::vector<int> accuracy;
  std::vector<double> rt;
  double initial_value;
  Eigen::Matrix<double, -1, 1> alpha_priors__;
  Eigen::Matrix<double, -1, 1> drift_scaling_priors__;
  Eigen::Matrix<double, -1, 1> threshold_priors__;
  Eigen::Matrix<double, -1, 1> threshold_modulation_priors__;
  Eigen::Matrix<double, -1, 1> ndt_priors__;
  double starting_point;
  Eigen::Matrix<double, -1, 1> Q0__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> f_cor{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> f_inc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> alpha_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> drift_scaling_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> threshold_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> threshold_modulation_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ndt_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Q0{nullptr, 0};
 
 public:
  ~RLDDM_thrmod_model() { }
  
  inline std::string model_name() const final { return "RLDDM_thrmod_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  RLDDM_thrmod_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "RLDDM_thrmod_model_namespace::RLDDM_thrmod_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 57;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 57;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 58;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("trial_block", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","trial_block","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      trial_block = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 60;
      trial_block = context__.vals_i("trial_block");
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "trial_block",
                                            trial_block, 1);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("f_cor", "N", N);
      current_statement__ = 62;
      context__.validate_dims("data initialization","f_cor","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      f_cor__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&f_cor) Eigen::Map<Eigen::Matrix<double, -1, 1>>(f_cor__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> f_cor_flat__;
        current_statement__ = 62;
        f_cor_flat__ = context__.vals_r("f_cor");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 62;
          stan::model::assign(f_cor, f_cor_flat__[(pos__ - 1)],
            "assigning variable f_cor", stan::model::index_uni(sym1__));
          current_statement__ = 62;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index("f_inc", "N", N);
      current_statement__ = 64;
      context__.validate_dims("data initialization","f_inc","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      f_inc__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&f_inc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(f_inc__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> f_inc_flat__;
        current_statement__ = 64;
        f_inc_flat__ = context__.vals_r("f_inc");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 64;
          stan::model::assign(f_inc, f_inc_flat__[(pos__ - 1)],
            "assigning variable f_inc", stan::model::index_uni(sym1__));
          current_statement__ = 64;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 65;
      stan::math::validate_non_negative_index("cor_option", "N", N);
      current_statement__ = 66;
      context__.validate_dims("data initialization","cor_option","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      cor_option = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 66;
      cor_option = context__.vals_i("cor_option");
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "cor_option",
                                            cor_option, 1);
      current_statement__ = 66;
      stan::math::check_less_or_equal(function__, "cor_option", cor_option, K);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("inc_option", "N", N);
      current_statement__ = 68;
      context__.validate_dims("data initialization","inc_option","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      inc_option = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 68;
      inc_option = context__.vals_i("inc_option");
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "inc_option",
                                            inc_option, 1);
      current_statement__ = 68;
      stan::math::check_less_or_equal(function__, "inc_option", inc_option, K);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("block_label", "N", N);
      current_statement__ = 70;
      context__.validate_dims("data initialization","block_label","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      block_label = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 70;
      block_label = context__.vals_i("block_label");
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "block_label",
                                            block_label, 1);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("accuracy", "N", N);
      current_statement__ = 72;
      context__.validate_dims("data initialization","accuracy","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      accuracy = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 72;
      accuracy = context__.vals_i("accuracy");
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "accuracy", accuracy, -1);
      current_statement__ = 72;
      stan::math::check_less_or_equal(function__, "accuracy", accuracy, 1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 74;
      context__.validate_dims("data initialization","rt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 74;
      rt = context__.vals_r("rt");
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 75;
      context__.validate_dims("data initialization","initial_value","double",
           std::vector<size_t>{});
      initial_value = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 75;
      initial_value = context__.vals_r("initial_value")[(1 - 1)];
      current_statement__ = 76;
      context__.validate_dims("data initialization","alpha_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      alpha_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&alpha_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(alpha_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> alpha_priors_flat__;
        current_statement__ = 76;
        alpha_priors_flat__ = context__.vals_r("alpha_priors");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 76;
          stan::model::assign(alpha_priors, alpha_priors_flat__[(pos__ - 1)],
            "assigning variable alpha_priors", stan::model::index_uni(sym1__));
          current_statement__ = 76;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 77;
      context__.validate_dims("data initialization","drift_scaling_priors",
          "double", std::vector<size_t>{static_cast<size_t>(2)});
      drift_scaling_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&drift_scaling_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(drift_scaling_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> drift_scaling_priors_flat__;
        current_statement__ = 77;
        drift_scaling_priors_flat__ = context__.vals_r("drift_scaling_priors");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 77;
          stan::model::assign(drift_scaling_priors,
            drift_scaling_priors_flat__[(pos__ - 1)],
            "assigning variable drift_scaling_priors", stan::model::index_uni(sym1__));
          current_statement__ = 77;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 78;
      context__.validate_dims("data initialization","threshold_priors",
          "double", std::vector<size_t>{static_cast<size_t>(2)});
      threshold_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&threshold_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(threshold_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> threshold_priors_flat__;
        current_statement__ = 78;
        threshold_priors_flat__ = context__.vals_r("threshold_priors");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 78;
          stan::model::assign(threshold_priors,
            threshold_priors_flat__[(pos__ - 1)],
            "assigning variable threshold_priors", stan::model::index_uni(sym1__));
          current_statement__ = 78;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 79;
      context__.validate_dims("data initialization",
          "threshold_modulation_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      threshold_modulation_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&threshold_modulation_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(threshold_modulation_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> threshold_modulation_priors_flat__;
        current_statement__ = 79;
        threshold_modulation_priors_flat__ = context__.vals_r("threshold_modulation_priors");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 79;
          stan::model::assign(threshold_modulation_priors,
            threshold_modulation_priors_flat__[(pos__ - 1)],
            "assigning variable threshold_modulation_priors", stan::model::index_uni(sym1__));
          current_statement__ = 79;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 80;
      context__.validate_dims("data initialization","ndt_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      ndt_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ndt_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 80;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 80;
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          current_statement__ = 80;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 81;
      context__.validate_dims("data initialization","starting_point",
          "double", std::vector<size_t>{});
      starting_point = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 81;
      starting_point = context__.vals_r("starting_point")[(1 - 1)];
      current_statement__ = 81;
      stan::math::check_greater_or_equal(function__, "starting_point",
                                            starting_point, 0);
      current_statement__ = 81;
      stan::math::check_less_or_equal(function__, "starting_point",
                                         starting_point, 1);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("Q0", "K", K);
      current_statement__ = 83;
      Q0__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&Q0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Q0__.data(), K);
      
      current_statement__ = 84;
      stan::model::assign(Q0, stan::math::rep_vector(initial_value, K),
        "assigning variable Q0");
      current_statement__ = 85;
      stan::math::validate_non_negative_index("drift_ll", "N", N);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("drift_t", "N", N);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("threshold_t", "N", N);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("Q", "K", K);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("Q_mean_pres", "N", N);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("delta_Q", "N", N);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "RLDDM_thrmod_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      local_scalar_t__ drift_scaling = DUMMY_VAR__;
      current_statement__ = 2;
      drift_scaling = in__.template read<local_scalar_t__>();
      local_scalar_t__ threshold = DUMMY_VAR__;
      current_statement__ = 3;
      threshold = in__.template read<local_scalar_t__>();
      local_scalar_t__ threshold_modulation = DUMMY_VAR__;
      current_statement__ = 4;
      threshold_modulation = in__.template read<local_scalar_t__>();
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 5;
      ndt = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> drift_ll =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> drift_t =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> threshold_t =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> ndt_t =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> Q =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      local_scalar_t__ Q_mean = DUMMY_VAR__;
      std::vector<local_scalar_t__> Q_mean_pres =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> delta_Q =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      local_scalar_t__ PE_cor = DUMMY_VAR__;
      local_scalar_t__ PE_inc = DUMMY_VAR__;
      local_scalar_t__ transf_alpha = DUMMY_VAR__;
      local_scalar_t__ transf_drift_scaling = DUMMY_VAR__;
      local_scalar_t__ transf_threshold = DUMMY_VAR__;
      local_scalar_t__ transf_threshold_modulation = DUMMY_VAR__;
      local_scalar_t__ transf_ndt = DUMMY_VAR__;
      current_statement__ = 21;
      transf_alpha = stan::math::Phi(alpha);
      current_statement__ = 22;
      transf_drift_scaling = stan::math::log(
                               (1 + stan::math::exp(drift_scaling)));
      current_statement__ = 23;
      transf_threshold = stan::math::log((1 + stan::math::exp(threshold)));
      current_statement__ = 24;
      transf_threshold_modulation = threshold_modulation;
      current_statement__ = 25;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 45;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 33;
        if (stan::math::logical_eq(
              stan::model::rvalue(trial_block, "trial_block",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 31;
          if (stan::math::logical_eq(
                stan::model::rvalue(block_label, "block_label",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 29;
            stan::model::assign(Q, Q0, "assigning variable Q");
          } else {
            current_statement__ = 26;
            Q_mean = stan::math::mean(Q);
            current_statement__ = 27;
            stan::model::assign(Q, stan::math::rep_vector(Q_mean, K),
              "assigning variable Q");
          }
        } 
        current_statement__ = 34;
        stan::model::assign(Q_mean_pres,
          ((stan::model::rvalue(Q, "Q",
              stan::model::index_uni(stan::model::rvalue(cor_option,
                                       "cor_option",
                                       stan::model::index_uni(n)))) +
             stan::model::rvalue(Q, "Q",
               stan::model::index_uni(stan::model::rvalue(inc_option,
                                        "inc_option",
                                        stan::model::index_uni(n))))) / 2),
          "assigning variable Q_mean_pres", stan::model::index_uni(n));
        current_statement__ = 35;
        stan::model::assign(delta_Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(cor_option,
                                      "cor_option",
                                      stan::model::index_uni(n)))) -
            stan::model::rvalue(Q, "Q",
              stan::model::index_uni(stan::model::rvalue(inc_option,
                                       "inc_option",
                                       stan::model::index_uni(n))))),
          "assigning variable delta_Q", stan::model::index_uni(n));
        current_statement__ = 36;
        PE_cor = (stan::model::rvalue(f_cor, "f_cor",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(cor_option,
                                              "cor_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 37;
        PE_inc = (stan::model::rvalue(f_inc, "f_inc",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(inc_option,
                                              "inc_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 38;
        stan::model::assign(drift_t,
          (transf_drift_scaling *
            stan::model::rvalue(delta_Q, "delta_Q",
              stan::model::index_uni(n))),
          "assigning variable drift_t", stan::model::index_uni(n));
        current_statement__ = 39;
        stan::model::assign(drift_ll,
          (stan::model::rvalue(drift_t, "drift_t", stan::model::index_uni(n))
            *
            stan::model::rvalue(accuracy, "accuracy",
              stan::model::index_uni(n))),
          "assigning variable drift_ll", stan::model::index_uni(n));
        current_statement__ = 40;
        stan::model::assign(threshold_t,
          stan::math::log(
            (1 +
              stan::math::exp(
                (threshold +
                  (threshold_modulation *
                    stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                      stan::model::index_uni(n))))))),
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 41;
        stan::model::assign(ndt_t, transf_ndt,
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 42;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(cor_option,
                                      "cor_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_cor)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           cor_option,
                                                           "cor_option",
                                                           stan::model::index_uni(n))));
        current_statement__ = 43;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(inc_option,
                                      "inc_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_inc)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           inc_option,
                                                           "inc_option",
                                                           stan::model::index_uni(n))));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      {
        current_statement__ = 51;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(alpha,
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(2))));
        current_statement__ = 52;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(drift_scaling,
            stan::model::rvalue(drift_scaling_priors, "drift_scaling_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(drift_scaling_priors, "drift_scaling_priors",
              stan::model::index_uni(2))));
        current_statement__ = 53;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(threshold,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(2))));
        current_statement__ = 54;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(threshold_modulation,
            stan::model::rvalue(threshold_modulation_priors,
              "threshold_modulation_priors", stan::model::index_uni(1)),
            stan::model::rvalue(threshold_modulation_priors,
              "threshold_modulation_priors", stan::model::index_uni(2))));
        current_statement__ = 55;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(2))));
        current_statement__ = 56;
        lp_accum__.add(
          stan::math::wiener_lpdf<propto__>(rt, threshold_t, ndt_t,
            starting_point, drift_ll));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "RLDDM_thrmod_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      double drift_scaling = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      drift_scaling = in__.template read<local_scalar_t__>();
      double threshold = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      threshold = in__.template read<local_scalar_t__>();
      double threshold_modulation = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      threshold_modulation = in__.template read<local_scalar_t__>();
      double ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      ndt = in__.template read<local_scalar_t__>();
      std::vector<double> drift_ll =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> drift_t =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> threshold_t =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ndt_t =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> Q =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      double Q_mean = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> Q_mean_pres =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> delta_Q =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      double PE_cor = std::numeric_limits<double>::quiet_NaN();
      double PE_inc = std::numeric_limits<double>::quiet_NaN();
      double transf_alpha = std::numeric_limits<double>::quiet_NaN();
      double transf_drift_scaling = std::numeric_limits<double>::quiet_NaN();
      double transf_threshold = std::numeric_limits<double>::quiet_NaN();
      double transf_threshold_modulation =
         std::numeric_limits<double>::quiet_NaN();
      double transf_ndt = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha);
      out__.write(drift_scaling);
      out__.write(threshold);
      out__.write(threshold_modulation);
      out__.write(ndt);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      transf_alpha = stan::math::Phi(alpha);
      current_statement__ = 22;
      transf_drift_scaling = stan::math::log(
                               (1 + stan::math::exp(drift_scaling)));
      current_statement__ = 23;
      transf_threshold = stan::math::log((1 + stan::math::exp(threshold)));
      current_statement__ = 24;
      transf_threshold_modulation = threshold_modulation;
      current_statement__ = 25;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 45;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 33;
        if (stan::math::logical_eq(
              stan::model::rvalue(trial_block, "trial_block",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 31;
          if (stan::math::logical_eq(
                stan::model::rvalue(block_label, "block_label",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 29;
            stan::model::assign(Q, Q0, "assigning variable Q");
          } else {
            current_statement__ = 26;
            Q_mean = stan::math::mean(Q);
            current_statement__ = 27;
            stan::model::assign(Q, stan::math::rep_vector(Q_mean, K),
              "assigning variable Q");
          }
        } 
        current_statement__ = 34;
        stan::model::assign(Q_mean_pres,
          ((stan::model::rvalue(Q, "Q",
              stan::model::index_uni(stan::model::rvalue(cor_option,
                                       "cor_option",
                                       stan::model::index_uni(n)))) +
             stan::model::rvalue(Q, "Q",
               stan::model::index_uni(stan::model::rvalue(inc_option,
                                        "inc_option",
                                        stan::model::index_uni(n))))) / 2),
          "assigning variable Q_mean_pres", stan::model::index_uni(n));
        current_statement__ = 35;
        stan::model::assign(delta_Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(cor_option,
                                      "cor_option",
                                      stan::model::index_uni(n)))) -
            stan::model::rvalue(Q, "Q",
              stan::model::index_uni(stan::model::rvalue(inc_option,
                                       "inc_option",
                                       stan::model::index_uni(n))))),
          "assigning variable delta_Q", stan::model::index_uni(n));
        current_statement__ = 36;
        PE_cor = (stan::model::rvalue(f_cor, "f_cor",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(cor_option,
                                              "cor_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 37;
        PE_inc = (stan::model::rvalue(f_inc, "f_inc",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(inc_option,
                                              "inc_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 38;
        stan::model::assign(drift_t,
          (transf_drift_scaling *
            stan::model::rvalue(delta_Q, "delta_Q",
              stan::model::index_uni(n))),
          "assigning variable drift_t", stan::model::index_uni(n));
        current_statement__ = 39;
        stan::model::assign(drift_ll,
          (stan::model::rvalue(drift_t, "drift_t", stan::model::index_uni(n))
            *
            stan::model::rvalue(accuracy, "accuracy",
              stan::model::index_uni(n))),
          "assigning variable drift_ll", stan::model::index_uni(n));
        current_statement__ = 40;
        stan::model::assign(threshold_t,
          stan::math::log(
            (1 +
              stan::math::exp(
                (threshold +
                  (threshold_modulation *
                    stan::model::rvalue(Q_mean_pres, "Q_mean_pres",
                      stan::model::index_uni(n))))))),
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 41;
        stan::model::assign(ndt_t, transf_ndt,
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 42;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(cor_option,
                                      "cor_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_cor)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           cor_option,
                                                           "cor_option",
                                                           stan::model::index_uni(n))));
        current_statement__ = 43;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(inc_option,
                                      "inc_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_inc)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           inc_option,
                                                           "inc_option",
                                                           stan::model::index_uni(n))));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      if (emit_transformed_parameters__) {
        out__.write(drift_ll);
        out__.write(drift_t);
        out__.write(threshold_t);
        out__.write(ndt_t);
        out__.write(Q);
        out__.write(Q_mean);
        out__.write(Q_mean_pres);
        out__.write(delta_Q);
        out__.write(PE_cor);
        out__.write(PE_inc);
        out__.write(transf_alpha);
        out__.write(transf_drift_scaling);
        out__.write(transf_threshold);
        out__.write(transf_threshold_modulation);
        out__.write(transf_ndt);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 49;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 47;
          stan::model::assign(log_lik,
            stan::math::wiener_lpdf<false>(
              stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
              stan::model::rvalue(threshold_t, "threshold_t",
                stan::model::index_uni(n)),
              stan::model::rvalue(ndt_t, "ndt_t", stan::model::index_uni(n)),
              starting_point,
              stan::model::rvalue(drift_ll, "drift_ll",
                stan::model::index_uni(n))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      local_scalar_t__ drift_scaling = DUMMY_VAR__;
      drift_scaling = in__.read<local_scalar_t__>();
      out__.write(drift_scaling);
      local_scalar_t__ threshold = DUMMY_VAR__;
      threshold = in__.read<local_scalar_t__>();
      out__.write(threshold);
      local_scalar_t__ threshold_modulation = DUMMY_VAR__;
      threshold_modulation = in__.read<local_scalar_t__>();
      out__.write(threshold_modulation);
      local_scalar_t__ ndt = DUMMY_VAR__;
      ndt = in__.read<local_scalar_t__>();
      out__.write(ndt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "drift_scaling", "threshold",
      "threshold_modulation", "ndt", "drift_ll", "drift_t", "threshold_t",
      "ndt_t", "Q", "Q_mean", "Q_mean_pres", "delta_Q", "PE_cor", "PE_inc",
      "transf_alpha", "transf_drift_scaling", "transf_threshold",
      "transf_threshold_modulation", "transf_ndt", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "drift_scaling");
    param_names__.emplace_back(std::string() + "threshold");
    param_names__.emplace_back(std::string() + "threshold_modulation");
    param_names__.emplace_back(std::string() + "ndt");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_ll" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Q_mean");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q_mean_pres" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "delta_Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "PE_cor");
      param_names__.emplace_back(std::string() + "PE_inc");
      param_names__.emplace_back(std::string() + "transf_alpha");
      param_names__.emplace_back(std::string() + "transf_drift_scaling");
      param_names__.emplace_back(std::string() + "transf_threshold");
      param_names__.emplace_back(std::string() + "transf_threshold_modulation");
      param_names__.emplace_back(std::string() + "transf_ndt");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "drift_scaling");
    param_names__.emplace_back(std::string() + "threshold");
    param_names__.emplace_back(std::string() + "threshold_modulation");
    param_names__.emplace_back(std::string() + "ndt");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_ll" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Q_mean");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q_mean_pres" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "delta_Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "PE_cor");
      param_names__.emplace_back(std::string() + "PE_inc");
      param_names__.emplace_back(std::string() + "transf_alpha");
      param_names__.emplace_back(std::string() + "transf_drift_scaling");
      param_names__.emplace_back(std::string() + "transf_threshold");
      param_names__.emplace_back(std::string() + "transf_threshold_modulation");
      param_names__.emplace_back(std::string() + "transf_ndt");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"threshold_modulation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_ll\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean_pres\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"delta_Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"PE_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold_modulation\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"threshold_modulation\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_ll\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"drift_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean_pres\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"delta_Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"PE_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_drift_scaling\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold_modulation\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = ((((((((((((((N
                                                                    + N) + N)
                                                                    + N) + K)
                                                                    + 1) + N)
                                                                    + N) + 1)
                                                                    + 1) + 1)
                                                                    + 1) + 1)
                                                                    + 1) + 1);
      const size_t num_gen_quantities = N;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = ((((((((((((((N
                                                                    + N) + N)
                                                                    + N) + K)
                                                                    + 1) + N)
                                                                    + N) + 1)
                                                                    + 1) + 1)
                                                                    + 1) + 1)
                                                                    + 1) + 1);
      const size_t num_gen_quantities = N;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"alpha", "drift_scaling",
      "threshold", "threshold_modulation", "ndt"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{1, 1, 
       1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = RLDDM_thrmod_model_namespace::RLDDM_thrmod_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return RLDDM_thrmod_model_namespace::profiles__;
}

#endif


