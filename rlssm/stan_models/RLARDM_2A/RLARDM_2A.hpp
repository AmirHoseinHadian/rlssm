
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace RLARDM_2A_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 132> locations_array__ = 
{" (found before start of program)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 86, column 2 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 87, column 1 to column 10)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 88, column 2 to column 10)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 89, column 2 to column 10)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 90, column 2 to column 10)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 91, column 1 to column 12)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 95, column 2 to column 34)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 96, column 1 to column 33)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 97, column 1 to column 33)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 98, column 1 to column 27)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 100, column 2 to column 14)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 101, column 1 to column 13)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 102, column 1 to column 13)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 104, column 2 to column 14)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 106, column 2 to column 24)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 107, column 2 to column 18)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 108, column 2 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 109, column 2 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 110, column 2 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 111, column 2 to column 20)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 113, column 2 to column 45)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 114, column 2 to column 33)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 115, column 2 to column 31)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 116, column 2 to column 31)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 117, column 2 to column 31)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 118, column 2 to column 28)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 127, column 4 to column 21)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 128, column 4 to column 30)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 126, column 9 to line 129, column 4)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 125, column 4 to column 11)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 124, column 27 to line 126, column 4)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 124, column 3 to line 129, column 4)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 123, column 28 to line 130, column 3)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 123, column 4 to line 130, column 3)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 132, column 4 to column 41)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 133, column 2 to column 39)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 135, column 4 to column 38)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 136, column 2 to column 24)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 137, column 4 to column 135)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 138, column 4 to column 135)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 141, column 4 to column 62)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 142, column 2 to column 60)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 122, column 16 to line 144, column 3)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 122, column 2 to line 144, column 3)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 160, column 1 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 163, column 2 to column 154)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 162, column 15 to line 164, column 2)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 162, column 1 to line 164, column 2)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 161, column 1 to line 165, column 2)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 149, column 1 to column 62)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 150, column 2 to column 46)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 151, column 2 to column 42)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 152, column 2 to column 42)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 153, column 2 to column 42)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 154, column 2 to column 51)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 156, column 1 to column 57)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 49, column 2 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 50, column 2 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 51, column 2 to column 21)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 52, column 27 to column 28)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 52, column 2 to column 30)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 53, column 27 to column 28)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 53, column 2 to column 30)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 55, column 9 to column 10)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 55, column 2 to column 18)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 56, column 8 to column 9)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 56, column 1 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 59, column 35 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 59, column 2 to column 38)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 60, column 34 to column 35)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 60, column 1 to column 37)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 61, column 33 to column 34)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 61, column 2 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 63, column 19 to column 20)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 63, column 2 to column 22)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 65, column 1 to column 28)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 66, column 1 to column 22)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 67, column 2 to column 22)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 68, column 2 to column 22)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 69, column 2 to column 22)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 70, column 2 to column 25)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 74, column 8 to column 9)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 74, column 1 to column 14)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 75, column 10 to column 11)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 75, column 2 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 77, column 2 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 80, column 4 to column 21)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 81, column 4 to column 27)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 79, column 16 to line 82, column 3)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 79, column 2 to line 82, column 3)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 95, column 19 to column 20)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 96, column 18 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 97, column 18 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 98, column 18 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 102, column 8 to column 9)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 160, column 8 to column 9)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 3, column 10 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 4, column 10 to column 75)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 5, column 10 to column 21)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 2, column 42 to line 6, column 6)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 9, column 10 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 10, column 10 to column 74)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 11, column 10 to column 21)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 8, column 42 to line 12, column 6)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 16, column 10 to column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 17, column 17 to column 25)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 17, column 10 to column 32)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 18, column 10 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 19, column 10 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 20, column 10 to column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 23, column 15 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 40, column 20 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 39, column 19 to line 41, column 16)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 30, column 20 to column 58)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 31, column 20 to column 62)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 29, column 22 to line 32, column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 26, column 20 to column 58)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 27, column 20 to column 62)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 25, column 34 to line 28, column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 25, column 18 to line 32, column 19)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 33, column 18 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 36, column 20 to column 36)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 35, column 35 to line 37, column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 35, column 16 to line 37, column 17)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 24, column 24 to line 38, column 16)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 24, column 15 to line 41, column 16)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 22, column 31 to line 42, column 11)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 22, column 10 to line 42, column 11)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 43, column 10 to column 31)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 44, column 10 to column 21)",
 " (in '/home/andrei/PycharmProjects/rlssm/rlssm/stan_models/RLARDM_2A/RLARDM_2A.stan', line 14, column 89 to line 45, column 6)"};

struct race_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__, typename T4__,
            stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>>
  operator()(const T0__& RT, const T1__& ndt, const T2__& b,
             const T3__& drift_cor, const T4__& drift_inc,
             std::ostream* pstream__) const;
};
struct race_pdf_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& b, const T2__& v,
             std::ostream* pstream__) const;
};
struct race_cdf_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& t, const T1__& b, const T2__& v,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  race_pdf(const T0__& t, const T1__& b, const T2__& v,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ pdf = DUMMY_VAR__;
      current_statement__ = 98;
      pdf = ((b /
               stan::math::sqrt(
                 ((2 * stan::math::pi()) * stan::math::pow(t, 3)))) *
              stan::math::exp((-stan::math::pow(((v * t) - b), 2) / (2 * t))));
      current_statement__ = 99;
      return pdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  race_cdf(const T0__& t, const T1__& b, const T2__& v,
           std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ cdf = DUMMY_VAR__;
      current_statement__ = 102;
      cdf = (stan::math::Phi((((v * t) - b) / stan::math::sqrt(t))) +
              (stan::math::exp(((2 * v) * b)) *
                stan::math::Phi((-((v * t) + b) / stan::math::sqrt(t)))));
      current_statement__ = 103;
      return cdf;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>>
  race_lpdf(const T0__& RT_arg__, const T1__& ndt_arg__, const T2__& b_arg__,
            const T3__& drift_cor_arg__, const T4__& drift_inc_arg__,
            std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>>;
    int current_statement__ = 0; 
    const auto& RT = stan::math::to_ref(RT_arg__);
    const auto& ndt = stan::math::to_ref(ndt_arg__);
    const auto& b = stan::math::to_ref(b_arg__);
    const auto& drift_cor = stan::math::to_ref(drift_cor_arg__);
    const auto& drift_inc = stan::math::to_ref(drift_inc_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ t = DUMMY_VAR__;
      current_statement__ = 106;
      stan::math::validate_non_negative_index("prob", "rows(RT)",
                                              stan::math::rows(RT));
      Eigen::Matrix<local_scalar_t__, -1, 1> prob =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::rows(RT), DUMMY_VAR__);
      local_scalar_t__ cdf = DUMMY_VAR__;
      local_scalar_t__ pdf = DUMMY_VAR__;
      local_scalar_t__ out = DUMMY_VAR__;
      current_statement__ = 128;
      for (int i = 1; i <= stan::math::rows(RT); ++i) {
        current_statement__ = 111;
        t = (stan::model::rvalue(RT, "RT",
               stan::model::index_uni(i), stan::model::index_uni(1)) -
              stan::model::rvalue(ndt, "ndt", stan::model::index_uni(i)));
        current_statement__ = 126;
        if (stan::math::logical_gt(t, 0)) {
          current_statement__ = 120;
          if (stan::math::logical_eq(
                stan::model::rvalue(RT, "RT",
                  stan::model::index_uni(i), stan::model::index_uni(2)), 1)) {
            current_statement__ = 117;
            pdf = race_pdf(t,
                    stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                    stan::model::rvalue(drift_cor, "drift_cor",
                      stan::model::index_uni(i)), pstream__);
            current_statement__ = 118;
            cdf = (1 -
                    race_cdf(t,
                      stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                      stan::model::rvalue(drift_inc, "drift_inc",
                        stan::model::index_uni(i)), pstream__));
          } else {
            current_statement__ = 114;
            pdf = race_pdf(t,
                    stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                    stan::model::rvalue(drift_inc, "drift_inc",
                      stan::model::index_uni(i)), pstream__);
            current_statement__ = 115;
            cdf = (1 -
                    race_cdf(t,
                      stan::model::rvalue(b, "b", stan::model::index_uni(i)),
                      stan::model::rvalue(drift_cor, "drift_cor",
                        stan::model::index_uni(i)), pstream__));
          }
          current_statement__ = 121;
          stan::model::assign(prob, (pdf * cdf),
            "assigning variable prob", stan::model::index_uni(i));
          current_statement__ = 124;
          if (stan::math::logical_lt(
                stan::model::rvalue(prob, "prob", stan::model::index_uni(i)),
                1e-10)) {
            current_statement__ = 122;
            stan::model::assign(prob, 1e-10,
              "assigning variable prob", stan::model::index_uni(i));
          } 
        } else {
          current_statement__ = 112;
          stan::model::assign(prob, 1e-10,
            "assigning variable prob", stan::model::index_uni(i));
        }
      }
      current_statement__ = 129;
      out = stan::math::sum(stan::math::log(prob));
      current_statement__ = 130;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_eigen_matrix_dynamic_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>>
race_lpdf_functor__::operator()(const T0__& RT, const T1__& ndt,
                                const T2__& b, const T3__& drift_cor,
                                const T4__& drift_inc,
                                std::ostream* pstream__)  const
{
  return race_lpdf<propto__>(RT, ndt, b, drift_cor, drift_inc, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& v,
                               std::ostream* pstream__)  const
{
  return race_pdf(t, b, v, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf_functor__::operator()(const T0__& t, const T1__& b, const T2__& v,
                               std::ostream* pstream__)  const
{
  return race_cdf(t, b, v, pstream__);
}

 class RLARDM_2A_model final : public model_base_crtp<RLARDM_2A_model> {

 private:
  int N;
  int K;
  double initial_value;
  std::vector<int> block_label;
  std::vector<int> trial_block;
  Eigen::Matrix<double, -1, 1> f_cor__;
  Eigen::Matrix<double, -1, 1> f_inc__;
  std::vector<int> cor_option;
  std::vector<int> inc_option;
  std::vector<int> accuracy;
  std::vector<double> rt;
  Eigen::Matrix<double, -1, 1> threshold_priors__;
  Eigen::Matrix<double, -1, 1> ndt_priors__;
  Eigen::Matrix<double, -1, 1> v0_priors__;
  Eigen::Matrix<double, -1, 1> ws_priors__;
  Eigen::Matrix<double, -1, 1> wd_priors__;
  Eigen::Matrix<double, -1, 1> alpha_priors__;
  Eigen::Matrix<double, -1, 1> Q0__;
  Eigen::Matrix<double, -1, -1> RT__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> f_cor{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> f_inc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> threshold_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ndt_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> v0_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ws_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> wd_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> alpha_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Q0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> RT{nullptr, 0, 0};
 
 public:
  ~RLARDM_2A_model() { }
  
  inline std::string model_name() const final { return "RLARDM_2A_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = "};
  }
  
  
  RLARDM_2A_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "RLARDM_2A_model_namespace::RLARDM_2A_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 57;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 57;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 58;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization","initial_value","double",
           std::vector<size_t>{});
      initial_value = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 59;
      initial_value = context__.vals_r("initial_value")[(1 - 1)];
      current_statement__ = 60;
      stan::math::validate_non_negative_index("block_label", "N", N);
      current_statement__ = 61;
      context__.validate_dims("data initialization","block_label","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      block_label = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 61;
      block_label = context__.vals_i("block_label");
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "block_label",
                                            block_label, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("trial_block", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization","trial_block","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      trial_block = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 63;
      trial_block = context__.vals_i("trial_block");
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "trial_block",
                                            trial_block, 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("f_cor", "N", N);
      current_statement__ = 65;
      context__.validate_dims("data initialization","f_cor","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      f_cor__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&f_cor) Eigen::Map<Eigen::Matrix<double, -1, 1>>(f_cor__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> f_cor_flat__;
        current_statement__ = 65;
        f_cor_flat__ = context__.vals_r("f_cor");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 65;
          stan::model::assign(f_cor, f_cor_flat__[(pos__ - 1)],
            "assigning variable f_cor", stan::model::index_uni(sym1__));
          current_statement__ = 65;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 66;
      stan::math::validate_non_negative_index("f_inc", "N", N);
      current_statement__ = 67;
      context__.validate_dims("data initialization","f_inc","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      f_inc__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&f_inc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(f_inc__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> f_inc_flat__;
        current_statement__ = 67;
        f_inc_flat__ = context__.vals_r("f_inc");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 67;
          stan::model::assign(f_inc, f_inc_flat__[(pos__ - 1)],
            "assigning variable f_inc", stan::model::index_uni(sym1__));
          current_statement__ = 67;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("cor_option", "N", N);
      current_statement__ = 69;
      context__.validate_dims("data initialization","cor_option","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      cor_option = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 69;
      cor_option = context__.vals_i("cor_option");
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "cor_option",
                                            cor_option, 1);
      current_statement__ = 69;
      stan::math::check_less_or_equal(function__, "cor_option", cor_option, K);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("inc_option", "N", N);
      current_statement__ = 71;
      context__.validate_dims("data initialization","inc_option","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      inc_option = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 71;
      inc_option = context__.vals_i("inc_option");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "inc_option",
                                            inc_option, 1);
      current_statement__ = 71;
      stan::math::check_less_or_equal(function__, "inc_option", inc_option, K);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("accuracy", "N", N);
      current_statement__ = 73;
      context__.validate_dims("data initialization","accuracy","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      accuracy = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 73;
      accuracy = context__.vals_i("accuracy");
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "accuracy", accuracy, 1);
      current_statement__ = 73;
      stan::math::check_less_or_equal(function__, "accuracy", accuracy, 2);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 75;
      context__.validate_dims("data initialization","rt","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 75;
      rt = context__.vals_r("rt");
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 76;
      context__.validate_dims("data initialization","threshold_priors",
          "double", std::vector<size_t>{static_cast<size_t>(2)});
      threshold_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&threshold_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(threshold_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> threshold_priors_flat__;
        current_statement__ = 76;
        threshold_priors_flat__ = context__.vals_r("threshold_priors");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 76;
          stan::model::assign(threshold_priors,
            threshold_priors_flat__[(pos__ - 1)],
            "assigning variable threshold_priors", stan::model::index_uni(sym1__));
          current_statement__ = 76;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 77;
      context__.validate_dims("data initialization","ndt_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      ndt_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ndt_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 77;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 77;
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          current_statement__ = 77;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 78;
      context__.validate_dims("data initialization","v0_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      v0_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&v0_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(v0_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> v0_priors_flat__;
        current_statement__ = 78;
        v0_priors_flat__ = context__.vals_r("v0_priors");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 78;
          stan::model::assign(v0_priors, v0_priors_flat__[(pos__ - 1)],
            "assigning variable v0_priors", stan::model::index_uni(sym1__));
          current_statement__ = 78;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 79;
      context__.validate_dims("data initialization","ws_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      ws_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&ws_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ws_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> ws_priors_flat__;
        current_statement__ = 79;
        ws_priors_flat__ = context__.vals_r("ws_priors");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 79;
          stan::model::assign(ws_priors, ws_priors_flat__[(pos__ - 1)],
            "assigning variable ws_priors", stan::model::index_uni(sym1__));
          current_statement__ = 79;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 80;
      context__.validate_dims("data initialization","wd_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      wd_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&wd_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(wd_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> wd_priors_flat__;
        current_statement__ = 80;
        wd_priors_flat__ = context__.vals_r("wd_priors");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 80;
          stan::model::assign(wd_priors, wd_priors_flat__[(pos__ - 1)],
            "assigning variable wd_priors", stan::model::index_uni(sym1__));
          current_statement__ = 80;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 81;
      context__.validate_dims("data initialization","alpha_priors","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      alpha_priors__ = 
        Eigen::Matrix<double, -1, 1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      new (&alpha_priors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(alpha_priors__.data(), 2);
        
      
      {
        std::vector<local_scalar_t__> alpha_priors_flat__;
        current_statement__ = 81;
        alpha_priors_flat__ = context__.vals_r("alpha_priors");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 81;
          stan::model::assign(alpha_priors, alpha_priors_flat__[(pos__ - 1)],
            "assigning variable alpha_priors", stan::model::index_uni(sym1__));
          current_statement__ = 81;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 82;
      stan::math::validate_non_negative_index("Q0", "K", K);
      current_statement__ = 83;
      Q0__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&Q0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Q0__.data(), K);
      
      current_statement__ = 84;
      stan::math::validate_non_negative_index("RT", "N", N);
      current_statement__ = 85;
      RT__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&RT) Eigen::Map<Eigen::Matrix<double, -1, -1>>(RT__.data(), N, 2);
      
      current_statement__ = 86;
      stan::model::assign(Q0, stan::math::rep_vector(initial_value, K),
        "assigning variable Q0");
      current_statement__ = 90;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 87;
        stan::model::assign(RT,
          stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(1));
        current_statement__ = 88;
        stan::model::assign(RT,
          stan::model::rvalue(accuracy, "accuracy",
            stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
                                     stan::model::index_uni(2));
      }
      current_statement__ = 91;
      stan::math::validate_non_negative_index("drift_cor_t", "N", N);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("drift_inc_t", "N", N);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("threshold_t", "N", N);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("Q", "K", K);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "RLARDM_2A_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ threshold = DUMMY_VAR__;
      current_statement__ = 1;
      threshold = in__.template read<local_scalar_t__>();
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 2;
      ndt = in__.template read<local_scalar_t__>();
      local_scalar_t__ v0 = DUMMY_VAR__;
      current_statement__ = 3;
      v0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ wd = DUMMY_VAR__;
      current_statement__ = 4;
      wd = in__.template read<local_scalar_t__>();
      local_scalar_t__ ws = DUMMY_VAR__;
      current_statement__ = 5;
      ws = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 6;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_cor_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> drift_inc_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> threshold_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> ndt_t =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ PE_cor = DUMMY_VAR__;
      local_scalar_t__ PE_inc = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__, -1, 1> Q =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      local_scalar_t__ Q_mean = DUMMY_VAR__;
      local_scalar_t__ transf_threshold = DUMMY_VAR__;
      local_scalar_t__ transf_ndt = DUMMY_VAR__;
      local_scalar_t__ transf_v0 = DUMMY_VAR__;
      local_scalar_t__ transf_wd = DUMMY_VAR__;
      local_scalar_t__ transf_ws = DUMMY_VAR__;
      local_scalar_t__ transf_alpha = DUMMY_VAR__;
      current_statement__ = 21;
      transf_threshold = stan::math::log((1 + stan::math::exp(threshold)));
      current_statement__ = 22;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 23;
      transf_v0 = stan::math::log((1 + stan::math::exp(v0)));
      current_statement__ = 24;
      transf_ws = stan::math::log((1 + stan::math::exp(ws)));
      current_statement__ = 25;
      transf_wd = stan::math::log((1 + stan::math::exp(wd)));
      current_statement__ = 26;
      transf_alpha = stan::math::Phi(alpha);
      current_statement__ = 44;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 34;
        if (stan::math::logical_eq(
              stan::model::rvalue(trial_block, "trial_block",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 32;
          if (stan::math::logical_eq(
                stan::model::rvalue(block_label, "block_label",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 30;
            stan::model::assign(Q, Q0, "assigning variable Q");
          } else {
            current_statement__ = 27;
            Q_mean = stan::math::mean(Q);
            current_statement__ = 28;
            stan::model::assign(Q, stan::math::rep_vector(Q_mean, K),
              "assigning variable Q");
          }
        } 
        current_statement__ = 35;
        PE_cor = (stan::model::rvalue(f_cor, "f_cor",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(cor_option,
                                              "cor_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 36;
        PE_inc = (stan::model::rvalue(f_inc, "f_inc",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(inc_option,
                                              "inc_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 37;
        stan::model::assign(threshold_t, transf_threshold,
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 38;
        stan::model::assign(ndt_t, transf_ndt,
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 39;
        stan::model::assign(drift_cor_t,
          ((transf_v0 +
             (transf_wd *
               (stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(cor_option,
                                           "cor_option",
                                           stan::model::index_uni(n)))) -
                 stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(inc_option,
                                            "inc_option",
                                            stan::model::index_uni(n))))))) +
            (transf_ws *
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(inc_option,
                                           "inc_option",
                                           stan::model::index_uni(n))))))),
          "assigning variable drift_cor_t", stan::model::index_uni(n));
        current_statement__ = 40;
        stan::model::assign(drift_inc_t,
          ((transf_v0 +
             (transf_wd *
               (stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(inc_option,
                                           "inc_option",
                                           stan::model::index_uni(n)))) -
                 stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(cor_option,
                                            "cor_option",
                                            stan::model::index_uni(n))))))) +
            (transf_ws *
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(inc_option,
                                           "inc_option",
                                           stan::model::index_uni(n))))))),
          "assigning variable drift_inc_t", stan::model::index_uni(n));
        current_statement__ = 41;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(cor_option,
                                      "cor_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_cor)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           cor_option,
                                                           "cor_option",
                                                           stan::model::index_uni(n))));
        current_statement__ = 42;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(inc_option,
                                      "inc_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_inc)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           inc_option,
                                                           "inc_option",
                                                           stan::model::index_uni(n))));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "drift_cor_t",
                                            drift_cor_t, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "drift_inc_t",
                                            drift_inc_t, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      {
        current_statement__ = 50;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(threshold,
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(threshold_priors, "threshold_priors",
              stan::model::index_uni(2))));
        current_statement__ = 51;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(ndt,
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(ndt_priors, "ndt_priors",
              stan::model::index_uni(2))));
        current_statement__ = 52;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(v0,
            stan::model::rvalue(v0_priors, "v0_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(v0_priors, "v0_priors",
              stan::model::index_uni(2))));
        current_statement__ = 53;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(ws,
            stan::model::rvalue(ws_priors, "ws_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(ws_priors, "ws_priors",
              stan::model::index_uni(2))));
        current_statement__ = 54;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(wd,
            stan::model::rvalue(wd_priors, "wd_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(wd_priors, "wd_priors",
              stan::model::index_uni(2))));
        current_statement__ = 55;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(alpha,
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(1)),
            stan::model::rvalue(alpha_priors, "alpha_priors",
              stan::model::index_uni(2))));
        current_statement__ = 56;
        lp_accum__.add(
          race_lpdf<propto__>(RT, ndt_t, threshold_t, drift_cor_t,
            drift_inc_t, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "RLARDM_2A_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double threshold = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      threshold = in__.template read<local_scalar_t__>();
      double ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      ndt = in__.template read<local_scalar_t__>();
      double v0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      v0 = in__.template read<local_scalar_t__>();
      double wd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      wd = in__.template read<local_scalar_t__>();
      double ws = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      ws = in__.template read<local_scalar_t__>();
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> drift_cor_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> drift_inc_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> threshold_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> ndt_t =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      double PE_cor = std::numeric_limits<double>::quiet_NaN();
      double PE_inc = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> Q =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      double Q_mean = std::numeric_limits<double>::quiet_NaN();
      double transf_threshold = std::numeric_limits<double>::quiet_NaN();
      double transf_ndt = std::numeric_limits<double>::quiet_NaN();
      double transf_v0 = std::numeric_limits<double>::quiet_NaN();
      double transf_wd = std::numeric_limits<double>::quiet_NaN();
      double transf_ws = std::numeric_limits<double>::quiet_NaN();
      double transf_alpha = std::numeric_limits<double>::quiet_NaN();
      out__.write(threshold);
      out__.write(ndt);
      out__.write(v0);
      out__.write(wd);
      out__.write(ws);
      out__.write(alpha);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      transf_threshold = stan::math::log((1 + stan::math::exp(threshold)));
      current_statement__ = 22;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 23;
      transf_v0 = stan::math::log((1 + stan::math::exp(v0)));
      current_statement__ = 24;
      transf_ws = stan::math::log((1 + stan::math::exp(ws)));
      current_statement__ = 25;
      transf_wd = stan::math::log((1 + stan::math::exp(wd)));
      current_statement__ = 26;
      transf_alpha = stan::math::Phi(alpha);
      current_statement__ = 44;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 34;
        if (stan::math::logical_eq(
              stan::model::rvalue(trial_block, "trial_block",
                stan::model::index_uni(n)), 1)) {
          current_statement__ = 32;
          if (stan::math::logical_eq(
                stan::model::rvalue(block_label, "block_label",
                  stan::model::index_uni(n)), 1)) {
            current_statement__ = 30;
            stan::model::assign(Q, Q0, "assigning variable Q");
          } else {
            current_statement__ = 27;
            Q_mean = stan::math::mean(Q);
            current_statement__ = 28;
            stan::model::assign(Q, stan::math::rep_vector(Q_mean, K),
              "assigning variable Q");
          }
        } 
        current_statement__ = 35;
        PE_cor = (stan::model::rvalue(f_cor, "f_cor",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(cor_option,
                                              "cor_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 36;
        PE_inc = (stan::model::rvalue(f_inc, "f_inc",
                    stan::model::index_uni(n)) -
                   stan::model::rvalue(Q, "Q",
                     stan::model::index_uni(stan::model::rvalue(inc_option,
                                              "inc_option",
                                              stan::model::index_uni(n)))));
        current_statement__ = 37;
        stan::model::assign(threshold_t, transf_threshold,
          "assigning variable threshold_t", stan::model::index_uni(n));
        current_statement__ = 38;
        stan::model::assign(ndt_t, transf_ndt,
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 39;
        stan::model::assign(drift_cor_t,
          ((transf_v0 +
             (transf_wd *
               (stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(cor_option,
                                           "cor_option",
                                           stan::model::index_uni(n)))) -
                 stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(inc_option,
                                            "inc_option",
                                            stan::model::index_uni(n))))))) +
            (transf_ws *
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(inc_option,
                                           "inc_option",
                                           stan::model::index_uni(n))))))),
          "assigning variable drift_cor_t", stan::model::index_uni(n));
        current_statement__ = 40;
        stan::model::assign(drift_inc_t,
          ((transf_v0 +
             (transf_wd *
               (stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(inc_option,
                                           "inc_option",
                                           stan::model::index_uni(n)))) -
                 stan::model::rvalue(Q, "Q",
                   stan::model::index_uni(stan::model::rvalue(cor_option,
                                            "cor_option",
                                            stan::model::index_uni(n))))))) +
            (transf_ws *
              (stan::model::rvalue(Q, "Q",
                 stan::model::index_uni(stan::model::rvalue(cor_option,
                                          "cor_option",
                                          stan::model::index_uni(n)))) +
                stan::model::rvalue(Q, "Q",
                  stan::model::index_uni(stan::model::rvalue(inc_option,
                                           "inc_option",
                                           stan::model::index_uni(n))))))),
          "assigning variable drift_inc_t", stan::model::index_uni(n));
        current_statement__ = 41;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(cor_option,
                                      "cor_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_cor)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           cor_option,
                                                           "cor_option",
                                                           stan::model::index_uni(n))));
        current_statement__ = 42;
        stan::model::assign(Q,
          (stan::model::rvalue(Q, "Q",
             stan::model::index_uni(stan::model::rvalue(inc_option,
                                      "inc_option",
                                      stan::model::index_uni(n)))) +
            (transf_alpha * PE_inc)),
          "assigning variable Q", stan::model::index_uni(stan::model::rvalue(
                                                           inc_option,
                                                           "inc_option",
                                                           stan::model::index_uni(n))));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "drift_cor_t",
                                            drift_cor_t, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "drift_inc_t",
                                            drift_inc_t, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "threshold_t",
                                            threshold_t, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      if (emit_transformed_parameters__) {
        out__.write(drift_cor_t);
        out__.write(drift_inc_t);
        out__.write(threshold_t);
        out__.write(ndt_t);
        out__.write(PE_cor);
        out__.write(PE_inc);
        out__.write(Q);
        out__.write(Q_mean);
        out__.write(transf_threshold);
        out__.write(transf_ndt);
        out__.write(transf_v0);
        out__.write(transf_wd);
        out__.write(transf_ws);
        out__.write(transf_alpha);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 48;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 46;
          stan::model::assign(log_lik,
            race_lpdf<false>(stan::math::block(RT, n, 1, 1, 2),
              stan::math::segment(ndt_t, n, 1),
              stan::math::segment(threshold_t, n, 1),
              stan::math::segment(drift_cor_t, n, 1),
              stan::math::segment(drift_inc_t, n, 1), pstream__),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ threshold = DUMMY_VAR__;
      threshold = in__.read<local_scalar_t__>();
      out__.write(threshold);
      local_scalar_t__ ndt = DUMMY_VAR__;
      ndt = in__.read<local_scalar_t__>();
      out__.write(ndt);
      local_scalar_t__ v0 = DUMMY_VAR__;
      v0 = in__.read<local_scalar_t__>();
      out__.write(v0);
      local_scalar_t__ wd = DUMMY_VAR__;
      wd = in__.read<local_scalar_t__>();
      out__.write(wd);
      local_scalar_t__ ws = DUMMY_VAR__;
      ws = in__.read<local_scalar_t__>();
      out__.write(ws);
      local_scalar_t__ alpha = DUMMY_VAR__;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"threshold", "ndt", "v0", "wd", "ws",
      "alpha", "drift_cor_t", "drift_inc_t", "threshold_t", "ndt_t",
      "PE_cor", "PE_inc", "Q", "Q_mean", "transf_threshold", "transf_ndt",
      "transf_v0", "transf_wd", "transf_ws", "transf_alpha", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "threshold");
    param_names__.emplace_back(std::string() + "ndt");
    param_names__.emplace_back(std::string() + "v0");
    param_names__.emplace_back(std::string() + "wd");
    param_names__.emplace_back(std::string() + "ws");
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "PE_cor");
      param_names__.emplace_back(std::string() + "PE_inc");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Q_mean");
      param_names__.emplace_back(std::string() + "transf_threshold");
      param_names__.emplace_back(std::string() + "transf_ndt");
      param_names__.emplace_back(std::string() + "transf_v0");
      param_names__.emplace_back(std::string() + "transf_wd");
      param_names__.emplace_back(std::string() + "transf_ws");
      param_names__.emplace_back(std::string() + "transf_alpha");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "threshold");
    param_names__.emplace_back(std::string() + "ndt");
    param_names__.emplace_back(std::string() + "v0");
    param_names__.emplace_back(std::string() + "wd");
    param_names__.emplace_back(std::string() + "ws");
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_cor_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "drift_inc_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "threshold_t" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ndt_t" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "PE_cor");
      param_names__.emplace_back(std::string() + "PE_inc");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Q_mean");
      param_names__.emplace_back(std::string() + "transf_threshold");
      param_names__.emplace_back(std::string() + "transf_ndt");
      param_names__.emplace_back(std::string() + "transf_v0");
      param_names__.emplace_back(std::string() + "transf_wd");
      param_names__.emplace_back(std::string() + "transf_ws");
      param_names__.emplace_back(std::string() + "transf_alpha");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"v0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"wd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_cor_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"PE_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_v0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_wd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ws\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"threshold\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"v0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"wd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_cor_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_inc_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"threshold_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"PE_cor\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"PE_inc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Q_mean\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_threshold\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_v0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_wd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ws\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((((((N + N) + N) + N) + 1) + 1) + K) + 1) + 1) + 1) + 1) + 1) + 1)
    + 1);
      const size_t num_gen_quantities = N;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 
  (((((((((((((N + N) + N) + N) + 1) + 1) + K) + 1) + 1) + 1) + 1) + 1) + 1)
    + 1);
      const size_t num_gen_quantities = N;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"threshold", "ndt", "v0",
      "wd", "ws", "alpha"};
      const std::array<Eigen::Index, 6> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = RLARDM_2A_model_namespace::RLARDM_2A_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return RLARDM_2A_model_namespace::profiles__;
}

#endif


